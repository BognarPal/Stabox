{"version":3,"file":"main.js","mappings":"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","sources":["webpack://stabox/./apps/api/src/Entities/address.entity.ts","webpack://stabox/./apps/api/src/Entities/contactUs.entity.ts","webpack://stabox/./apps/api/src/Entities/exchangeDate.entity.ts","webpack://stabox/./apps/api/src/Entities/index.ts","webpack://stabox/./apps/api/src/Entities/package.entity.ts","webpack://stabox/./apps/api/src/Entities/reciever.entity.ts","webpack://stabox/./apps/api/src/Entities/transaction.entity.ts","webpack://stabox/./apps/api/src/Entities/user.entity.ts","webpack://stabox/./apps/api/src/Entities/vehicle.entity.ts","webpack://stabox/./apps/api/src/app/address/address.controller.ts","webpack://stabox/./apps/api/src/app/address/address.module.ts","webpack://stabox/./apps/api/src/app/address/address.service.ts","webpack://stabox/./apps/api/src/app/app.controller.ts","webpack://stabox/./apps/api/src/app/app.module.ts","webpack://stabox/./apps/api/src/app/app.service.ts","webpack://stabox/./apps/api/src/app/auth/auth.guard.ts","webpack://stabox/./apps/api/src/app/auth/auth.module.ts","webpack://stabox/./apps/api/src/app/auth/index.ts","webpack://stabox/./apps/api/src/app/auth/role.guard.ts","webpack://stabox/./apps/api/src/app/auth/roles.decorator.ts","webpack://stabox/./apps/api/src/app/contact-us/contact-us.controller.ts","webpack://stabox/./apps/api/src/app/contact-us/contact-us.module.ts","webpack://stabox/./apps/api/src/app/exchange-date/exchange-date.controller.ts","webpack://stabox/./apps/api/src/app/exchange-date/exchange-date.module.ts","webpack://stabox/./apps/api/src/app/exchange-date/exchange-date.service.ts","webpack://stabox/./apps/api/src/app/generics/generic.service.ts","webpack://stabox/./apps/api/src/app/ormconfig.ts","webpack://stabox/./apps/api/src/app/package/package.controller.ts","webpack://stabox/./apps/api/src/app/package/package.module.ts","webpack://stabox/./apps/api/src/app/package/package.service.ts","webpack://stabox/./apps/api/src/app/reciever/reciever.controller.ts","webpack://stabox/./apps/api/src/app/reciever/reciever.module.ts","webpack://stabox/./apps/api/src/app/reciever/reciever.service.ts","webpack://stabox/./apps/api/src/app/transaction/transaction.controller.ts","webpack://stabox/./apps/api/src/app/transaction/transaction.module.ts","webpack://stabox/./apps/api/src/app/transaction/transaction.service.ts","webpack://stabox/./apps/api/src/app/user/user.controller.ts","webpack://stabox/./apps/api/src/app/user/user.module.ts","webpack://stabox/./apps/api/src/app/user/user.service.ts","webpack://stabox/./apps/api/src/app/user/userMin.DTO.ts","webpack://stabox/./apps/api/src/app/user/userUpdate.DTO.ts","webpack://stabox/./apps/api/src/app/vehicle/vehicle.controller.ts","webpack://stabox/./apps/api/src/app/vehicle/vehicle.module.ts","webpack://stabox/./apps/api/src/app/vehicle/vehicle.service.ts","webpack://stabox/external commonjs \"@nestjs/axios\"","webpack://stabox/external commonjs \"@nestjs/common\"","webpack://stabox/external commonjs \"@nestjs/config\"","webpack://stabox/external commonjs \"@nestjs/core\"","webpack://stabox/external commonjs \"@nestjs/serve-static\"","webpack://stabox/external commonjs \"@nestjs/typeorm\"","webpack://stabox/external commonjs \"class-validator\"","webpack://stabox/external commonjs \"express-jwt\"","webpack://stabox/external commonjs \"jwks-rsa\"","webpack://stabox/external commonjs \"tslib\"","webpack://stabox/external commonjs \"typeorm\"","webpack://stabox/external node-commonjs \"path\"","webpack://stabox/external node-commonjs \"util\"","webpack://stabox/webpack/bootstrap","webpack://stabox/./apps/api/src/main.ts"],"sourcesContent":["import {\r\n  Column,\r\n  Entity,\r\n  ManyToOne,\r\n  OneToMany,\r\n  PrimaryGeneratedColumn,\r\n} from 'typeorm';\r\nimport { exchangeDateEntity, packageEntity, userEntity } from '.';\r\nimport { recieverEntity } from './reciever.entity';\r\nimport { addressInterface } from '@stabox/stabox-lib';\r\n\r\n@Entity()\r\nexport class addressEntity implements addressInterface {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  userId: string;\r\n\r\n  @ManyToOne(() => userEntity, (user) => user.addresses)\r\n  user: userEntity;\r\n\r\n  @Column()\r\n  country: string;\r\n\r\n  @Column()\r\n  zipCode: number;\r\n\r\n  @Column()\r\n  cityName: string;\r\n\r\n  @Column()\r\n  street: string;\r\n\r\n  @Column()\r\n  houseNumber: string;\r\n\r\n  @Column({ nullable: true })\r\n  name: string;\r\n\r\n  @Column({ default: false })\r\n  isDeleted: boolean;\r\n\r\n  //Relations\r\n  @OneToMany(() => recieverEntity, (reciever) => reciever.address)\r\n  recievers: recieverEntity[];\r\n\r\n  @OneToMany(() => exchangeDateEntity, (exchangeDate) => exchangeDate.address)\r\n  exchangeDates: exchangeDateEntity[];\r\n\r\n  @OneToMany(() => packageEntity, (package_) => package_.fromAddress) // \"package\" is a reserved word for js\r\n  packages: packageEntity[];\r\n}\r\n","import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity()\r\nexport class contactUsEntity  {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  email: string;\r\n  @Column()\r\n  name: string;\r\n  @Column()\r\n  message: string;\r\n\r\n\r\n}\r\n","import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { addressEntity } from '.';\r\n\r\n@Entity()\r\n\r\n// on frontend we save start and end Dates as string TODO?\r\nexport class exchangeDateEntity {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  addressId;\r\n\r\n  @ManyToOne(() => addressEntity, (address) => address)\r\n  address: addressEntity;\r\n\r\n  @Column()\r\n  startDate: Date;\r\n\r\n  @Column()\r\n  endDate: Date;\r\n}\r\n","export * from './package.entity';\r\nexport * from './vehicle.entity';\r\nexport * from './transaction.entity';\r\nexport * from './user.entity';\r\nexport * from './address.entity';\r\nexport * from './exchangeDate.entity';\r\nexport * from './reciever.entity';\r\nexport * from './contactUs.entity'\r\n","import { packageInterface } from '@stabox/stabox-lib';\r\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { addressEntity, userEntity, vehicleEntity } from '.';\r\nimport { recieverEntity } from './reciever.entity';\r\n\r\n@Entity()\r\nexport class packageEntity implements packageInterface {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column({ nullable: true })\r\n  vehicleId: number;\r\n\r\n  @ManyToOne(() => vehicleEntity, (vehicle) => vehicle.id)\r\n  vehicle: vehicleEntity;\r\n\r\n  @Column()\r\n  userId: string;\r\n\r\n  @ManyToOne(() => userEntity, (user) => user.packages)\r\n  user: userEntity;\r\n\r\n  @Column()\r\n  recieverId: number;\r\n\r\n  @ManyToOne(() => recieverEntity, (reciever) => reciever.package)\r\n  reciever: recieverEntity;\r\n\r\n  @Column()\r\n  fromAddressId: number;\r\n\r\n  @ManyToOne(() => addressEntity, (fromAddress) => fromAddress.packages)\r\n  fromAddress: addressEntity;\r\n\r\n  @Column()\r\n  postDate: Date;\r\n\r\n  @Column()\r\n  shippingDate: Date;\r\n\r\n  @Column()\r\n  size: string;\r\n\r\n  @Column()\r\n  weight: string;\r\n\r\n  @Column()\r\n  fragile: boolean;\r\n\r\n  @Column()\r\n  price: number;\r\n\r\n  @Column()\r\n  currentCity: number;\r\n\r\n  @Column()\r\n  name: string;\r\n}\r\n","import { recieverInterface } from '@stabox/stabox-lib';\r\nimport {\r\n  Column,\r\n  Entity,\r\n  ManyToOne,\r\n  OneToMany,\r\n  PrimaryGeneratedColumn,\r\n} from 'typeorm';\r\nimport { addressEntity, packageEntity } from '.';\r\n\r\n@Entity()\r\nexport class recieverEntity implements recieverInterface {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  addressId: number;\r\n\r\n  @ManyToOne((type) => addressEntity, (address) => address.recievers)\r\n  address: addressEntity;\r\n\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  @Column()\r\n  email: string;\r\n\r\n  @Column()\r\n  phoneNumber: string;\r\n\r\n  //Relations\r\n  @OneToMany((type) => packageEntity, (package_) => package_.reciever)\r\n  package: packageEntity[];\r\n}\r\n","import { transactionInterface } from '@stabox/stabox-lib';\r\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { userEntity } from '.';\r\n\r\n@Entity()\r\nexport class transactionEntity implements transactionInterface {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  userId: string;\r\n\r\n  @ManyToOne(() => userEntity, (user) => user.transactions)\r\n  user: userEntity;\r\n\r\n  @Column()\r\n  amount: number;\r\n\r\n  @Column()\r\n  direction: boolean;\r\n\r\n  @Column('timestamp')\r\n  timeStamp: Date;\r\n}\r\n","import { Column, Entity, OneToMany, PrimaryColumn } from 'typeorm';\r\nimport {\r\n  addressEntity,\r\n  packageEntity,\r\n  transactionEntity,\r\n  vehicleEntity,\r\n} from '.';\r\n\r\n@Entity()\r\n  \r\n//forntend gets roles but we are not storing them so userEntity cant implement userInterface  \r\nexport class userEntity {\r\n  @PrimaryColumn()\r\n  id: string;\r\n\r\n  @Column({ unique: true })\r\n  email: string;\r\n\r\n  @Column()\r\n  username: string;\r\n\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  @Column()\r\n  phoneNumber: string;\r\n\r\n  @Column({ default: 0 })\r\n  stabucks: number;\r\n\r\n  //Relations\r\n  @OneToMany(() => transactionEntity, (transaction) => transaction.user)\r\n  transactions: transactionEntity[];\r\n\r\n  @OneToMany(() => vehicleEntity, (vehicles) => vehicles.user)\r\n  vehicles: vehicleEntity[];\r\n\r\n  @OneToMany(() => packageEntity, (package_) => package_.user) // package name is reserved in 'strict mode'\r\n  packages: packageEntity[];\r\n\r\n  @OneToMany(() => addressEntity, (address) => address.user) // package name is reserved in 'strict mode'\r\n  addresses: addressEntity[];\r\n}\r\n","import { vehicleInterface } from '@stabox/stabox-lib';\r\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { userEntity } from '.';\r\n\r\n@Entity()\r\nexport class vehicleEntity implements vehicleInterface {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  userId: string;\r\n\r\n  @ManyToOne(() => userEntity, (user) => user.vehicles)\r\n  user: userEntity;\r\n\r\n  @Column()\r\n  name: string;\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  MethodNotAllowedException,\r\n  Patch,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsNotEmpty, IsNumber, IsString, NotEquals } from 'class-validator';\r\nimport { addressEntity } from '../../Entities';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { AddressService } from './address.service';\r\nimport { Not } from 'typeorm';\r\n\r\nclass idDto  {\r\n  @IsNumber()\r\n  id: number;\r\n}\r\n\r\nclass addressDto {\r\n  @IsString()\r\n  country: string;\r\n  @IsNumber()\r\n  zipCode: number;\r\n  @IsString()\r\n  cityName: string;\r\n  @IsString()\r\n  street: string;\r\n  @IsString()\r\n  houseNumber: string;\r\n  @IsString()\r\n  name: string;\r\n}\r\n\r\nclass myAddressDto {\r\n  @IsNumber()\r\n  id: number;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  country: string;\r\n  @IsNumber()\r\n  @NotEquals(0)\t\r\n  zipCode: number;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  cityName: string;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  street: string;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  houseNumber: string;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  name: string;\r\n}\r\n\r\n@Controller('address')\r\nexport class AddressController {\r\n  constructor(private readonly addressService: AddressService) {}\r\n\r\n  //creates address\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Put()\r\n  create(@Req() req: authRequest, @Body() body: addressDto) {\r\n    return this.addressService.create({\r\n      id: 0,\r\n      userId: req.user.sub,\r\n      country: body.country,\r\n      zipCode: body.zipCode,\r\n      cityName: body.cityName,\r\n      street: body.street,\r\n      houseNumber: body.houseNumber,\r\n      name: body.name,\r\n    });\r\n  }\r\n\r\n  // gets all addresses\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post('/all')\r\n  getAll() {\r\n    return this.addressService.getAll();\r\n  }\r\n\r\n  // gets user's all address\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get()\r\n  getMyAddresses(@Req() req: authRequest): Promise<addressEntity[]> {\r\n    return this.addressService.find({\r\n      where: { userId: req.user.sub, name: Not(''), isDeleted: false },\r\n    });\r\n  }\r\n\r\n  // gets user's own addresses\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get('/reciever')\r\n  getMyRecieverAddresses(@Req() req: authRequest): Promise<addressEntity[]> {\r\n    return this.addressService.find({\r\n      where: { userId: req.user.sub, name: '', isDeleted: false },\r\n    });\r\n  }\r\n\r\n  // delete own address\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Delete()\r\n  delete(@Req() req: authRequest, @Body() body: idDto) {\r\n    return this.addressService.getById(body.id).then((a: addressEntity) => {\r\n      if (a.userId == req.user.sub) {\r\n        a.isDeleted = true;\r\n        return this.addressService.update(body.id, a).then(() => {\r\n          return this.addressService.delete(body.id);\r\n        });\r\n        // this.update(req, a)\r\n        // throw new MethodNotAllowedException(\r\n        //   'done'\r\n        // ); \r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only delete your own address'\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  //modify own address\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Patch()\r\n  update(@Req() req: authRequest, @Body() body: myAddressDto) {\r\n    return this.addressService.getById(body.id).then((a) => {\r\n      if (a.userId == req.user.sub) {\r\n        const newDates: addressDto = {\r\n          country: body.country,\r\n          zipCode: body.zipCode,\r\n          cityName: body.cityName,\r\n          street: body.street,\r\n          houseNumber: body.houseNumber,\r\n          name: body.name,\r\n        };\r\n        return this.addressService.update(body.id, newDates);\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only modify your own address'\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { addressEntity } from '../../Entities';\r\nimport { AddressController } from './address.controller';\r\nimport { AddressService } from './address.service';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([addressEntity])],\r\n  controllers: [AddressController],\r\n  providers: [AddressService],\r\n  exports: [AddressService],\r\n})\r\nexport class AddressModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { addressEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\n@Injectable()\r\nexport class AddressService extends GenericService<addressEntity> {\r\n  constructor(\r\n    @InjectRepository(addressEntity)\r\n    private addressRepository: Repository<addressEntity>\r\n  ) {\r\n    super(addressRepository);\r\n  }\r\n}\r\n","import { Controller, Get, Req, UseGuards } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\nimport { AuthGuard, authRequest, RoleGuard } from './auth';\r\nimport { Roles } from './auth/roles.decorator';\r\n\r\n@Controller()\r\nexport class AppController {\r\n  constructor(private readonly appService: AppService) {}\r\n\r\n  //needs to be logged in\r\n  @UseGuards(AuthGuard)\r\n  @Get('hello')\r\n  getData(@Req() req: authRequest) {\r\n    return req.user;\r\n  }\r\n\r\n  //simple test\r\n  @Get('test')\r\n  test() {\r\n    return \"workss\";\r\n  }\r\n\r\n  //needs admin role\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Get('/cat')\r\n  getCat(): string {\r\n    return this.appService.getCat();\r\n  }\r\n\r\n  @Get('/dog')\r\n  getDog(@Req() req): string {\r\n    return req.user + ' and a dog';\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { UserModule } from './user/user.module';\r\nimport { AuthModule } from './auth/auth.module';\r\nimport { ExchangeDateModule } from './exchange-date/exchange-date.module';\r\nimport { TransactionModule } from './transaction/transaction.module';\r\nimport { VehicleModule } from './vehicle/vehicle.module';\r\nimport { AddressModule } from './address/address.module';\r\nimport { RecieverModule } from './reciever/reciever.module';\r\nimport { PackageModule } from './package/package.module';\r\nimport { ContactUsModule } from './contact-us/contact-us.module';\r\nimport { ServeStaticModule } from '@nestjs/serve-static';\r\nimport { join } from 'path';\r\n\r\nimport ormconfig = require('./ormconfig');\r\n\r\n@Module({\r\n  imports: [\r\n    AuthModule,\r\n    ConfigModule.forRoot(),\r\n    TypeOrmModule.forRoot(ormconfig),\r\n    ServeStaticModule.forRoot({\r\n      rootPath: join(__dirname, '.', 'frontend'),\r\n    }),\r\n    UserModule,\r\n    ExchangeDateModule,\r\n    TransactionModule,\r\n    VehicleModule,\r\n    AddressModule,\r\n    RecieverModule,\r\n    PackageModule,\r\n    ContactUsModule,\r\n  ],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { Message } from '@stabox/stabox-lib';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  getData(): Message {\r\n    return { message: 'Welcome to api!' };\r\n  }\r\n  getDog(): string {\r\n    return 'woof';\r\n  }\r\n  getCat(): string {\r\n    return 'meow';\r\n  }\r\n\r\n  getHello(): string {\r\n    return 'Hello World!';\r\n  }\r\n}\r\n","import {\r\n  CanActivate,\r\n  ExecutionContext,\r\n  Injectable,\r\n  UnauthorizedException,\r\n} from '@nestjs/common';\r\nimport { expressJwtSecret } from 'jwks-rsa';\r\nimport { promisify } from 'util';\r\nimport * as jwt from 'express-jwt';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  private AUTH0_AUDIENCE: string;\r\n  private AUTH0_DOMAIN: string;\r\n\r\n  constructor() {\r\n    this.AUTH0_AUDIENCE = process.env.AUTH0_AUDIENCE;\r\n    this.AUTH0_DOMAIN = process.env.AUTH0_DOMAIN;\r\n  }\r\n\r\n  async canActivate(context: ExecutionContext): Promise<boolean> {\r\n    const req = context.getArgByIndex(0);\r\n    const res = context.getArgByIndex(1);\r\n\r\n    const checkJwt = promisify(\r\n      jwt({\r\n        secret: expressJwtSecret({\r\n          cache: true,\r\n          rateLimit: true,\r\n          jwksRequestsPerMinute: 5,\r\n          jwksUri: `${this.AUTH0_DOMAIN}.well-known/jwks.json`,\r\n        }),\r\n        audience: this.AUTH0_AUDIENCE,\r\n        issuer: this.AUTH0_DOMAIN,\r\n        algorithms: ['RS256'],\r\n      })\r\n    );\r\n\r\n    try {\r\n      await checkJwt(req, res);\r\n      return true;\r\n    } catch (error) {\r\n      throw new UnauthorizedException(error);\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\n\r\n@Module({})\r\nexport class AuthModule {}\r\n","export * from './auth.guard';\r\nexport * from './role.guard';\r\nexport * from './authRequest.interface';\r\n","import {\r\n  CanActivate,\r\n  ExecutionContext,\r\n  ForbiddenException,\r\n  Injectable,\r\n} from '@nestjs/common';\r\nimport { Reflector } from '@nestjs/core';\r\n\r\n@Injectable()\r\nexport class RoleGuard implements CanActivate {\r\n  constructor(private reflector: Reflector) {}\r\n  canActivate(context: ExecutionContext): boolean {\r\n    const [req] = context.getArgs();\r\n    const userRoles = req?.user[process.env.AUTH0_ROLES] || [];\r\n    const requiredRoles = this.reflector.get('roles', context.getHandler());\r\n    const hasAllRequiredRoles = requiredRoles.every((permission) =>\r\n      userRoles.includes(permission)\r\n    );\r\n    if (requiredRoles.length === 0 || hasAllRequiredRoles) {\r\n      return true;\r\n    }\r\n    throw new ForbiddenException('Insufficient Roles');\r\n  }\r\n}\r\n","import { SetMetadata } from '@nestjs/common';\r\n\r\nexport const Roles = (...roles: string[]) => SetMetadata('roles', roles);\r\n","import { Body, Controller, Get, Post, Req } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { IsEmail, IsString } from 'class-validator';\r\nimport { Repository } from 'typeorm';\r\nimport { contactUsEntity } from '../../Entities';\r\nimport { authRequest } from '../auth';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\nclass myExchangeDateDto {\r\n\r\n    @IsEmail()\r\n    email: string;\r\n    @IsString()\r\n    name: string;\r\n    @IsString()\r\n    message: string;\r\n  }\r\n  \r\n\r\n@Controller('contact-us')\r\nexport class ContactUsController {\r\n\r\nconstructor(@InjectRepository(contactUsEntity)private contactUsRepository:Repository<contactUsEntity>){}\r\n\r\n@Post()\r\n async create(@Body() body: myExchangeDateDto) {\r\n  const result= this.contactUsRepository.create(body);\r\n  return await this.contactUsRepository.save(result)\r\n}\r\n\r\n\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { contactUsEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\nimport { UserModule } from '../user/user.module';\r\nimport { ContactUsController } from './contact-us.controller';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([contactUsEntity]), UserModule],\r\n  controllers: [ContactUsController],\r\n  providers: [Repository],\r\n  exports: [],\r\n})\r\nexport class ContactUsModule {}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  MethodNotAllowedException,\r\n  Param,\r\n  Patch,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsDateString, IsNumber } from 'class-validator';\r\nimport { exchangeDateEntity } from '../../Entities';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { ExchangeDateService } from './exchange-date.service';\r\n\r\nclass idDto {\r\n  @IsNumber()\r\n  id: number;\r\n}\r\n\r\nclass exchangeDateDto {\r\n  @IsDateString()\r\n  startDate: Date;\r\n  @IsDateString()\r\n  endDate: Date;\r\n  @IsNumber()\r\n  addressId: number;\r\n}\r\n\r\nclass myExchangeDateDto {\r\n  @IsNumber()\r\n  id: number;\r\n  @IsDateString()\r\n  startDate: Date;\r\n  @IsDateString()\r\n  endDate: Date;\r\n  @IsNumber()\r\n  addressId: number;\r\n}\r\n\r\n@Controller('EXdate')\r\nexport class ExchangeDateController {\r\n  constructor(private readonly exchangeDateService: ExchangeDateService) {}\r\n\r\n  //creates exchangeDate\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Put()\r\n  create(@Req() req: authRequest, @Body() body: exchangeDateDto) {\r\n    return this.exchangeDateService.create({\r\n      ...body,\r\n    });\r\n  }\r\n\r\n  // gets all exchange dates\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post('/all')\r\n  getAll() {\r\n    return this.exchangeDateService.getAll();\r\n  }\r\n\r\n  // gets user's all exchange date\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get()\r\n  getMyExchangeDates(@Req() req: authRequest): Promise<exchangeDateEntity[]> {\r\n    return this.exchangeDateService.find({\r\n      where: { address: { userId: req.user.sub, isDeleted:false } },\r\n      relations: ['address'],\r\n      loadRelationIds: false,\r\n    });\r\n  }\r\n\r\n  // gets exchange date by id\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get('/package/:id')\r\n  getByPackageId(\r\n    @Req() req: authRequest,\r\n    @Param() id: number\r\n  ): Promise<exchangeDateEntity[]> {\r\n    return this.exchangeDateService.find({\r\n      where: { addressId:id },\r\n      relations: ['address'],\r\n      //TODO!!! : get package's exhange date\r\n    });\r\n  }\r\n\r\n  // delete own exchange date\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Delete()\r\n  delete(@Req() req: authRequest, @Body() body: idDto) {\r\n    // TODO errors, rework\r\n    return this.exchangeDateService.getById(body.id).then((a) => {\r\n      if (a.address.userId == req.user.sub) {\r\n        return this.exchangeDateService.delete(body.id);\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only delete your own exchange dates'\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  //modify own exchange date\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Patch()\r\n  update(@Req() req: authRequest, @Body() body: myExchangeDateDto) {\r\n    return this.exchangeDateService.getById(body.id).then((a) => {\r\n      if (a.address.userId == req.user.sub) {\r\n        return this.exchangeDateService.update(body.id, {\r\n          startDate: body.startDate,\r\n          endDate: body.endDate,\r\n          addressId: body.addressId,\r\n        });\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only modify your own exchange dates'\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { exchangeDateEntity } from '../../Entities';\r\nimport { UserModule } from '../user/user.module';\r\nimport { ExchangeDateController } from './exchange-date.controller';\r\nimport { ExchangeDateService } from './exchange-date.service';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([exchangeDateEntity]), UserModule],\r\n  controllers: [ExchangeDateController],\r\n  providers: [ExchangeDateService],\r\n  exports: [ExchangeDateService],\r\n})\r\nexport class ExchangeDateModule {}\r\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { exchangeDateEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\n@Injectable()\r\nexport class ExchangeDateService extends GenericService<exchangeDateEntity> {\r\n  constructor(\r\n    @InjectRepository(exchangeDateEntity)\r\n    private exchangeDateRepository: Repository<exchangeDateEntity>\r\n  ) {\r\n    super(exchangeDateRepository);\r\n  }\r\n  async getById(id: number): Promise<exchangeDateEntity> {\r\n    const item = await this.repository.findOne(id, { relations: ['address'] });\r\n    if (!item) {\r\n      throw new NotFoundException('NOT_FOUND');\r\n    }\r\n    return item;\r\n  }\r\n}\r\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport {\r\n  DeleteResult,\r\n  FindManyOptions,\r\n  Repository,\r\n  UpdateResult,\r\n} from 'typeorm';\r\n\r\n@Injectable()\r\nexport abstract class GenericService<T> {\r\n  constructor(protected readonly repository: Repository<T>) { }\r\n\r\n  async getAll(): Promise<T[]> {\r\n    return await this.repository.find();\r\n  }\r\n\r\n  async getById(id: number): Promise<T> {\r\n    const item = await this.repository.findOne(id);\r\n    if (!item) {\r\n      throw new NotFoundException('NOT_FOUND');\r\n    }\r\n    return item;\r\n  }\r\n\r\n  async find(options?: FindManyOptions<T>): Promise<T[]> {\r\n    return await this.repository.find(options);\r\n  }\r\n\r\n  async create(data: object): Promise<T> {\r\n    const result = this.repository.create(data);\r\n    return await this.repository.save(result);\r\n  }\r\n\r\n  async update(id: number, data: object): Promise<UpdateResult> {\r\n    return await this.repository.update(id, data);\r\n  }\r\n\r\n  async delete(id: number): Promise<DeleteResult> {\r\n    return await this.repository.delete(id);\r\n  }\r\n}\r\n","import { MysqlConnectionOptions } from 'typeorm/driver/mysql/MysqlConnectionOptions';\r\nimport {\r\n  addressEntity,\r\n  exchangeDateEntity,\r\n  packageEntity,\r\n  recieverEntity,\r\n  transactionEntity,\r\n  userEntity,\r\n  vehicleEntity,\r\n  contactUsEntity,\r\n} from '../Entities';\r\n\r\n// You can load you .env file here synchronously using dotenv package (not installed here),\r\n// import * as dotenv from 'dotenv';\r\n// import * as fs from 'fs';\r\n// const environment = process.env.NODE_ENV || 'development';\r\n// const data: any = dotenv.parse(fs.readFileSync(`${environment}.env`));\r\n// You can also make a singleton service that load and expose the .env file content.\r\n// ...\r\n\r\n// Check typeORM documentation for more information.\r\nconst config: MysqlConnectionOptions = {\r\n  type: 'mysql',\r\n  host: 'eu-cdbr-west-02.cleardb.net',\r\n  port: 3306,\r\n  username: 'ba26dd00a399fa',\r\n  password: 'c2095f8f',\r\n  database: 'heroku_eb31e99ed1af12a',\r\n  entities: [\r\n    userEntity,\r\n    addressEntity,\r\n    exchangeDateEntity,\r\n    packageEntity,\r\n    recieverEntity,\r\n    vehicleEntity,\r\n    transactionEntity,\r\n    contactUsEntity,\r\n  ],\r\n\r\n  // We are using migrations, synchronize should be set to false.\r\n  synchronize: true,\r\n\r\n  // Run migrations automatically,\r\n  // you can disable this if you prefer running migration manually.\r\n  migrationsRun: false,\r\n  logging: false,\r\n  logger: 'file',\r\n\r\n  // allow both start:prod and start:dev to use migrations\r\n  // __dirname is either dist or src folder, meaning either\r\n  // the compiled js in prod or the ts in dev\r\n  migrations: ['dist/src/migrations/**/*{.ts,.js}'],\r\n  cli: {\r\n    migrationsDir: 'src/migrations',\r\n  },\r\n};\r\n\r\nexport = config;\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  MethodNotAllowedException,\r\n  Patch,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsBoolean, IsDateString, IsNotEmpty, IsNumber, IsString, Matches } from 'class-validator';\r\nimport { Not } from 'typeorm';\r\nimport { packageEntity } from '../../Entities';\r\nimport { AddressService } from '../address/address.service';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { ExchangeDateService } from '../exchange-date/exchange-date.service';\r\nimport { VehicleService } from '../vehicle/vehicle.service';\r\nimport { PackageService } from './package.service';\r\n\r\nclass idDto {\r\n  @IsNumber()\r\n  id: number;\r\n}\r\n\r\nclass idDateDto {\r\n  @IsNumber()\r\n  id: number;\r\n  // @IsDateString()\r\n  // shipped: Date;\r\n}\r\n\r\nclass packageDto {\r\n  @IsString()\r\n  @Matches('[0-9]+x[0-9]+x[0-9]+')\r\n  size: string;\r\n  @IsString()\r\n  @Matches('([0-9]+gramm|[0-9]+kilogramm)')\r\n  weight: string;\r\n  @IsBoolean()\r\n  fragile: boolean;\r\n  @IsNumber()\r\n  fromAddressId: number;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  name: string;\r\n  @IsNumber()\r\n  recieverId: number;\r\n}\r\n\r\nclass assignMeDto {\r\n  @IsNumber()\r\n  id: number;\r\n  @IsNumber()\r\n  vehicleId: number;\r\n  @IsDateString()\r\n  postDate: Date;\r\n}\r\n\r\n@Controller('package')\r\nexport class PackageController {\r\n  constructor(\r\n    private readonly packageService: PackageService,\r\n    private readonly addressService: AddressService,\r\n    private readonly exchangeDateService: ExchangeDateService,\r\n    private readonly vehicleService: VehicleService\r\n  ) {}\r\n\r\n  //creates package\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Put()\r\n  create(@Req() req: authRequest, @Body() body: packageDto) {\r\n    return this.packageService.create({\r\n      userId: req.user.sub,\r\n      price: 500,\r\n      ...body,\r\n    });\r\n  }\r\n\r\n  //create package with address\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Put('/add')\r\n  createWithAddress(@Req() req: authRequest, @Body() body: packageDto) {\r\n    return this.packageService.create({\r\n      userId: req.user.sub,\r\n      price: 500,\r\n      ...body,\r\n    });\r\n  }\r\n\r\n  // gets all packages\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Post('/all')\r\n  getAll() {\r\n    return this.packageService.getAll();\r\n  }\r\n\r\n  // gets user packages\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get()\r\n  getMyPackages(@Req() req: authRequest): Promise<packageEntity[]> {\r\n    return this.packageService.find({\r\n      where: { userId: req.user.sub },\r\n    });\r\n  }\r\n\r\n  //returns user's own packages\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get('/mypackages')\r\n  getMyPackagesWithAddress(@Req() req: authRequest): Promise<packageEntity[]> {\r\n    return this.packageService.find({\r\n      where: { userId: req.user.sub },\r\n      relations: ['fromAddress','reciever','reciever.address'],\r\n    });\r\n  }\r\n  // gets acceptable packages\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Get('/acceptable')\r\n  getAcceptable(@Req() req: authRequest): Promise<any> {\r\n    return this.packageService.find({\r\n      where: { vehicleId: null, userId: Not(req.user.sub) },\r\n      relations: ['fromAddress','reciever','reciever.address'],\r\n    }).then((res: any[]) => res)\r\n  }\r\n  // gets accepted packages\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Get('/accepted')\r\n  getAccepted(@Req() req: authRequest): Promise<packageEntity[]> {\r\n    return this.packageService.find({\r\n      where: {\r\n        shippingDate: false,\r\n        vehicle: {\r\n          userId: req.user.sub,\r\n        },\r\n      },\r\n      relations: ['fromAddress', 'vehicle','reciever','reciever.address'],\r\n    });\r\n  }\r\n\r\n  // delete own package\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Delete()\r\n  delete(@Req() req: authRequest, @Body() body: idDto) {\r\n    return this.packageService.getById(body.id).then((a) => {\r\n      if (a.userId == req.user.sub) {\r\n        return this.packageService.delete(body.id);\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only delete your own package'\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  //assign vehicle, select post date\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Patch()\r\n  assignMe(@Req() req: authRequest, @Body() body: assignMeDto) {\r\n    return this.packageService.getById(body.id).then((a) => {\r\n      if (a.userId !== req.user.sub) {\r\n        return this.packageService.update(body.id, {\r\n          vehicleId: body.vehicleId,\r\n          postDate: body.postDate,\r\n        });\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can not accept your own package'\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  //sent\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Post()\r\n  async sent(@Req() req: authRequest, @Body() body: idDto) {\r\n    return this.packageService.getById(body.id).then((a) => {\r\n      if (a.vehicleId == 0) {\r\n        return this.addressService.getById(a.fromAddressId).then((n) => {\r\n          return this.packageService.update(body.id, {\r\n            currentCity: n.cityName,\r\n          });\r\n        });\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only assign to a package without a shipper'\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  //getAvaibleDates\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Get('/dates')\r\n  async getAvaibleDates(@Req() req: authRequest, @Body() body: idDto) {\r\n    return this.packageService.getById(body.id).then((a) => {\r\n      return this.exchangeDateService.find({\r\n        where: { address: { userId: a.userId } },\r\n      });\r\n    });\r\n  }\r\n\r\n  // gets shipper's all package\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Get('/vehicle')\r\n  getPackageByVehicleId(\r\n    @Req() req: authRequest,\r\n    @Body() body: idDto\r\n  ): Promise<packageEntity[]> {\r\n    return this.packageService.find({\r\n      where: { vehicleId: body.id },\r\n    });\r\n  }\r\n\r\n  //adds \"shipped\" date\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Post('/shipped')\r\n  shipped(@Req() req: authRequest, @Body() body: idDateDto) {\r\n    return this.packageService\r\n      .find({\r\n        where: { id: body.id },\r\n      })\r\n      .then((packag) => {\r\n        return this.vehicleService.getById(packag[0].vehicleId).then((veh) => {\r\n          if (veh.userId == req.user.sub) {\r\n            return this.packageService.update(body.id, {\r\n              shippingDate: new Date().toISOString(),\r\n            });\r\n          } else {\r\n            throw new MethodNotAllowedException(\r\n              'You can only approve packages shipped by you'\r\n            );\r\n          }\r\n        });\r\n      });\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { packageEntity } from '../../Entities';\r\nimport { AddressModule } from '../address/address.module';\r\nimport { ExchangeDateModule } from '../exchange-date/exchange-date.module';\r\nimport { VehicleModule } from '../vehicle/vehicle.module';\r\nimport { PackageController } from './package.controller';\r\nimport { PackageService } from './package.service';\r\n\r\n@Module({\r\n  imports: [\r\n    TypeOrmModule.forFeature([packageEntity]),\r\n    AddressModule,\r\n    ExchangeDateModule,\r\n    VehicleModule,\r\n  ],\r\n  controllers: [PackageController],\r\n  providers: [PackageService],\r\n})\r\nexport class PackageModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { packageEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\n@Injectable()\r\nexport class PackageService extends GenericService<packageEntity> {\r\n  constructor(\r\n    @InjectRepository(packageEntity)\r\n    private packageRepository: Repository<packageEntity>\r\n  ) {\r\n    super(packageRepository);\r\n\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsEmail, IsNotEmpty, IsNumber, IsPhoneNumber, IsString } from 'class-validator';\r\nimport { AddressService } from '../address/address.service';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { RecieverService } from './reciever.service';\r\n\r\nclass recieverWithAddressDto {\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  firstName: string;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  lastName: string;\r\n  @IsEmail()\r\n  email: string;\r\n  @IsPhoneNumber('HU')\r\n  phoneNumber: string;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  country: string;\r\n  @IsNumber()\r\n  zipCode: number;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  cityName: string;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  street: string;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  houseNumber: string;\r\n}\r\n\r\n@Controller('reciever')\r\nexport class RecieverController {\r\n  constructor(\r\n    private readonly recieverService: RecieverService,\r\n    private readonly addressService: AddressService\r\n  ) {}\r\n\r\n  //creates reciever with address\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Put()\r\n  createWithAddress(\r\n    @Req() req: authRequest,\r\n    @Body() body: recieverWithAddressDto\r\n  ) {\r\n    return this.addressService\r\n      .create({\r\n        id: 0,\r\n        userId: req.user.sub,\r\n        country: body.country,\r\n        zipCode: body.zipCode,\r\n        cityName: body.cityName,\r\n        street: body.street,\r\n        houseNumber: body.houseNumber,\r\n      })\r\n      .then((res) => {\r\n        return this.recieverService.create({\r\n          id: 0,\r\n          addressId: res.id,\r\n          firstName: body.firstName,\r\n          lastName: body.lastName,\r\n          email: body.email,\r\n          phoneNumber: body.phoneNumber,\r\n        });\r\n      });\r\n  }\r\n\r\n  // gets all recieveres\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post('/all')\r\n  getAll() {\r\n    return this.recieverService.getAll();\r\n  }\r\n\r\n  // gets user's all reciever\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get()\r\n  async getMyRecieveres(@Req() req: authRequest) {\r\n    const addressIds: number[] = await this.addressService\r\n      .find({\r\n        where: { userId: req.user.sub },\r\n      })\r\n      .then((addresses) => {\r\n        return addresses.map((a) => a.id);\r\n      });\r\n    return this.recieverService.RecieveresByAddressIds(addressIds);\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { RecieverService } from './reciever.service';\r\nimport { RecieverController } from './reciever.controller';\r\nimport { recieverEntity } from '../../Entities';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { AddressModule } from '../address/address.module';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([recieverEntity]), AddressModule],\r\n  providers: [RecieverService],\r\n  controllers: [RecieverController],\r\n})\r\nexport class RecieverModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { recieverEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\n@Injectable()\r\nexport class RecieverService extends GenericService<recieverEntity> {\r\n  constructor(\r\n    @InjectRepository(recieverEntity)\r\n    private recieverRepository: Repository<recieverEntity>\r\n  ) {\r\n    super(recieverRepository);\r\n  }\r\n\r\n\r\n  async RecieveresByAddressIds(addressIds: number[]) {\r\n    const recievers = await Promise.all(\r\n      addressIds.map((id) => {\r\n        return this.getRecByAdId(id);\r\n      })\r\n    );\r\n    return [].concat(...recievers);\r\n  }\r\n  private async getRecByAdId(id: number): Promise<recieverEntity[]> {\r\n    return this.recieverRepository.find({\r\n      where: { addressId: id },\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Get,\r\n  Patch,\r\n  Post,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsNumber } from 'class-validator';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { TransactionService } from './transaction.service';\r\n\r\nclass buyDto {\r\n  @IsNumber()\r\n  amount: number;\r\n}\r\n\r\n@Controller('transaction')\r\nexport class TransactionController {\r\n  constructor(private readonly transactionService: TransactionService) {}\r\n\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post()\r\n  all() {\r\n    return this.transactionService.getAll();\r\n  }\r\n\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get()\r\n  getMyTransactions(@Req() req: authRequest) {\r\n    return this.transactionService.find({\r\n      where: { userId: req.user.sub },\r\n    });\r\n  }\r\n\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin') // TODO: hogyan lehessen venni stabuck-ot\r\n  @Patch()\r\n  buy(@Req() req: authRequest, @Body() body: buyDto) {\r\n    const tra = { userId: req.user.sub, amount: body.amount, direction: true };\r\n    return this.transactionService.create(tra);\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { transactionEntity } from '../../Entities';\r\nimport { TransactionController } from './transaction.controller';\r\nimport { TransactionService } from './transaction.service';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([transactionEntity])],\r\n  controllers: [TransactionController],\r\n  providers: [TransactionService],\r\n})\r\nexport class TransactionModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { transactionEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\n@Injectable()\r\nexport class TransactionService extends GenericService<transactionEntity> {\r\n  constructor(\r\n    @InjectRepository(transactionEntity)\r\n    private transactionRepository: Repository<transactionEntity>\r\n  ) {\r\n    super(transactionRepository);\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  Patch,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsString } from 'class-validator';\r\nimport { FindManyOptions } from 'typeorm';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { userUpdateDto } from './userUpdate.DTO';\r\nimport { UserService } from './user.service';\r\nimport { userMinDto } from './userMin.DTO';\r\nimport { userInterface } from '@stabox/stabox-lib';\r\n\r\nclass idDto {\r\n  @IsString()\r\n  id: string;\r\n}\r\n\r\n@Controller('user')\r\nexport class UserController {\r\n  constructor(private readonly userService: UserService) {}\r\n\r\n  //gets own user data\r\n  @UseGuards(AuthGuard)\r\n  @Get()\r\n  getMyData(@Req() req: authRequest) {\r\n    return this.userService.getMyData(req);\r\n  }\r\n\r\n  //gets all username\r\n  @UseGuards(AuthGuard)\r\n  @Get('/all')\r\n  getAll() {\r\n    return this.userService.getAllUsername();\r\n  }\r\n\r\n  //Create user\r\n  @UseGuards(AuthGuard)\r\n  @Put()\r\n  create(\r\n    @Req() req: authRequest,\r\n    @Body() body: userMinDto\r\n  ): Promise<userInterface> {\r\n    //const body: userMin = { id: 0, username: '', email: '', authId: '' };\r\n    return this.userService.new(req.user.sub, body);\r\n  }\r\n\r\n  //Delete user\r\n  @UseGuards(AuthGuard)\r\n  @Delete()\r\n  delete(@Req() req: authRequest) {\r\n    return this.userService.deletee(req.user.sub);\r\n  }\r\n\r\n  //Modify user\r\n  @UseGuards(AuthGuard)\r\n  @Patch()\r\n  modify(@Req() req: authRequest, @Body() body: userUpdateDto) {\r\n    const newUser: {\r\n      username: string;\r\n      id: string;\r\n      firstName: string;\r\n      lastName: string;\r\n      phoneNumber: string;\r\n    } = {\r\n      username: body.username,\r\n      id: req.user.sub,\r\n      firstName: body.firstName,\r\n      lastName: body.lastName,\r\n      phoneNumber: body.phoneNumber,\r\n    };\r\n    this.userService.addUserRole(newUser.id);\r\n    return this.userService.updatee(newUser.id, newUser);\r\n  }\r\n\r\n  //get all user's all information\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post()\r\n  find(@Body() body: FindManyOptions) {\r\n    return this.userService.find(body);\r\n  }\r\n\r\n  //Add role to user\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post('/user')\r\n  addUserRole(@Body() body: idDto) {\r\n    return this.userService.addUserRole(body.id);\r\n  }\r\n\r\n  //Add role to user\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Post('/shipper')\r\n  addShipperRole(@Body() body: idDto) {\r\n    return this.userService.addShipperRole(body.id);\r\n  }\r\n\r\n  // //Remove role from user\r\n  // @Post()\r\n  // removeRole() {\r\n  //   return this.userService.removeRole();\r\n  // }\r\n}\r\n","import { HttpModule } from '@nestjs/axios';\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { userEntity } from '../../Entities';\r\nimport { UserController } from './user.controller';\r\nimport { UserService } from './user.service';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([userEntity]), HttpModule],\r\n  controllers: [UserController],\r\n  providers: [UserService],\r\n  exports: [UserService],\r\n})\r\nexport class UserModule {}\r\n","import { HttpService } from '@nestjs/axios';\r\nimport {\r\n  ConflictException,\r\n  Injectable,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { userInterface } from '@stabox/stabox-lib';\r\nimport { Repository } from 'typeorm';\r\nimport { userEntity } from '../../Entities';\r\nimport { authRequest } from '../auth';\r\nimport { GenericService } from '../generics/generic.service';\r\nimport { userMinDto } from './userMin.DTO';\r\n\r\n@Injectable()\r\nexport class UserService extends GenericService<userInterface> {\r\n  constructor(\r\n    @InjectRepository(userEntity)\r\n    private userRepository: Repository<userInterface>,\r\n    private httpService: HttpService\r\n  ) {\r\n    super(userRepository);\r\n  }\r\n\r\n  async addUserRole(id: string) {\r\n    return this.userRepository.findOne({ id: id }).then((res) => {\r\n      if (res == undefined) {\r\n        throw new NotFoundException('This user does not exist!');\r\n      } else {\r\n        const options = {\r\n          headers: {\r\n            'content-type': 'application/json',\r\n            authorization: 'Bearer ' + process.env.AUTH0_API_TOKEN,\r\n            'cache-control': 'no-cache',\r\n          },\r\n          data: { roles: ['rol_fOmBHGPGmePItkqG'] },\r\n        };\r\n        const data = { roles: ['rol_fOmBHGPGmePItkqG'] };\r\n        return this.httpService\r\n          .post(\r\n            process.env.AUTH0_DOMAIN + 'api/v2/users/' + id + '/roles',\r\n            data,\r\n            options\r\n          )\r\n          .subscribe((res) => res);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addShipperRole(id: string) {\r\n    return this.userRepository.findOne({ id: id }).then((res) => {\r\n      if (res == undefined) {\r\n        throw new NotFoundException('This user does not exist!');\r\n      } else {\r\n        const options = {\r\n          headers: {\r\n            'content-type': 'application/json',\r\n            authorization: 'Bearer ' + process.env.AUTH0_API_TOKEN,\r\n            'cache-control': 'no-cache',\r\n          },\r\n          data: { roles: ['rol_72IOyNuWHPWpC03o'] },\r\n        };\r\n        const data = { roles: ['rol_72IOyNuWHPWpC03o'] };\r\n        return this.httpService\r\n          .post(\r\n            process.env.AUTH0_DOMAIN + 'api/v2/users/' + id + '/roles',\r\n            data,\r\n            options\r\n          )\r\n          .subscribe((res) => res);\r\n      }\r\n    });\r\n  }\r\n\r\n  async deletee(id: string) {\r\n    return await this.userRepository.delete(id);\r\n  }\r\n\r\n  async updatee(id: string, data: object) {\r\n    return await this.userRepository.update(id, data);\r\n  }\r\n\r\n  async new(authId: string, user: userMinDto): Promise<userInterface> {\r\n    const newUser: {\r\n      email: string;\r\n      username: string;\r\n      id: string;\r\n    } = {\r\n      email: user.email,\r\n      username: user.username,\r\n      id: authId,\r\n    };\r\n    return this.userRepository.findOne({ email: user.email }).then((res) => {\r\n      if (res == undefined) {\r\n        return this.userRepository.findOne({ id: authId }).then((res) => {\r\n          if (res == undefined) {\r\n            return this.userRepository.save(newUser);\r\n          } else {\r\n            throw new ConflictException('User already exists with this id!');\r\n          }\r\n        });\r\n      } else {\r\n        throw new ConflictException(\r\n          'User already exists with this email address!'\r\n        );\r\n      }\r\n    });\r\n  }\r\n  async getAllUsername() {\r\n    return this.userRepository.find().then((res) => {\r\n      return res.map((user) => user.username);\r\n    });\r\n  }\r\n  async getMyData(req: authRequest) {\r\n    return this.userRepository.findOne({ id: req.user.sub }).then((res) => {\r\n      if (res == undefined) {\r\n        throw new NotFoundException(\r\n          'You can only get your data if you already have a user!'\r\n        );\r\n      } else {\r\n        const roles: { 'https://www.stabox.hu/roles': string[] } = {\r\n          'https://www.stabox.hu/roles': [\r\n            ...req.user['https://www.stabox.hu/roles'],\r\n          ],\r\n        };\r\n        return { ...roles, ...res }; // TODO: test this\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { IsString, IsEmail } from 'class-validator';\r\n\r\nexport class userMinDto {\r\n  @IsEmail()\r\n  email: string;\r\n  @IsString()\r\n  username: string;\r\n}\r\n","import { IsString, IsPhoneNumber, IsNotEmpty } from 'class-validator';\r\n\r\nexport class userUpdateDto {\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  username: string;\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  firstName: string;\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  lastName: string;\r\n  @IsPhoneNumber('HU')\r\n  phoneNumber: string;\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  MethodNotAllowedException,\r\n  Patch,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsNotEmpty, IsNumber, IsString } from 'class-validator';\r\nimport { vehicleEntity } from '../../Entities';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { VehicleService } from './vehicle.service';\r\n\r\nclass idDto {\r\n  @IsNumber()\r\n  id: number;\r\n}\r\n\r\nclass vehicleDto {\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  name: string;\r\n}\r\n\r\nclass myVehicleDto {\r\n  @IsNumber()\r\n  id: number;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  name: string;\r\n}\r\n\r\n@Controller('vehicle')\r\nexport class VehicleController {\r\n  constructor(private readonly vehicleService: VehicleService) {}\r\n\r\n  //creates vehicle\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Put()\r\n  create(@Req() req: authRequest, @Body() body: vehicleDto) {\r\n    return this.vehicleService.create({\r\n      id: 0,\r\n      userId: req.user.sub,\r\n      name: body.name,\r\n    });\r\n  }\r\n\r\n  // gets all vehicles\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post('/all')\r\n  getAll() {\r\n    return this.vehicleService.getAll();\r\n  }\r\n\r\n  // gets user's all vehicles\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Get()\r\n  getMyVehicles(@Req() req: authRequest): Promise<vehicleEntity[]> {\r\n    return this.vehicleService.find({\r\n      where: { userId: req.user.sub },\r\n    });\r\n  }\r\n\r\n  // delete own vehicles\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Delete()\r\n  delete(@Req() req: authRequest, @Body() body: idDto) {\r\n    return this.vehicleService.getById(body.id).then((a) => {\r\n      if (a.userId == req.user.sub) {\r\n        return this.vehicleService.delete(body.id);\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only delete your own vehicles'\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  //modify own vehicles\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Patch()\r\n  update(@Req() req: authRequest, @Body() body: myVehicleDto) {\r\n    return this.vehicleService.getById(body.id).then((a) => {\r\n      if (a.userId == req.user.sub) {\r\n        const newVehicle: vehicleDto = {\r\n          name: body.name,\r\n        };\r\n        return this.vehicleService.update(body.id, newVehicle);\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only modify your own vehicles'\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { VehicleService } from './vehicle.service';\r\nimport { VehicleController } from './vehicle.controller';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { vehicleEntity } from '../../Entities';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([vehicleEntity])],\r\n  providers: [VehicleService],\r\n  controllers: [VehicleController],\r\n  exports: [VehicleService],\r\n})\r\nexport class VehicleModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { vehicleEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\n@Injectable()\r\nexport class VehicleService extends GenericService<vehicleEntity> {\r\n  constructor(\r\n    @InjectRepository(vehicleEntity)\r\n    private vehicleRepository: Repository<vehicleEntity>\r\n  ) {\r\n    super(vehicleRepository);\r\n  }\r\n}\r\n","module.exports = require(\"@nestjs/axios\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"class-validator\");","module.exports = require(\"express-jwt\");","module.exports = require(\"jwks-rsa\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"path\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\n\r\nimport { Logger, ValidationPipe } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\n\r\nimport { AppModule } from './app/app.module';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  const globalPrefix = 'api';\r\n  app.enableCors();\r\n  app.useGlobalPipes(new ValidationPipe());\r\n  app.setGlobalPrefix(globalPrefix);\r\n  const port = process.env.PORT || 3333;\r\n  await app.listen(port);\r\n  Logger.log(\r\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\r\n  );\r\n}\r\n\r\nbootstrap();\r\n"],"names":["addressEntity","PrimaryGeneratedColumn","Column","ManyToOne","userEntity","user","addresses","nullable","default","OneToMany","recieverEntity","reciever","address","exchangeDateEntity","exchangeDate","packageEntity","package_","fromAddress","Entity","contactUsEntity","Date","vehicleEntity","vehicle","id","packages","package","type","recievers","transactionEntity","transactions","PrimaryColumn","unique","transaction","vehicles","idDto","IsNumber","addressDto","IsString","myAddressDto","IsNotEmpty","NotEquals","AddressController","constructor","addressService","create","req","body","this","userId","sub","country","zipCode","cityName","street","houseNumber","name","getAll","getMyAddresses","find","where","Not","isDeleted","getMyRecieverAddresses","delete","getById","then","a","update","MethodNotAllowedException","newDates","UseGuards","AuthGuard","RoleGuard","Roles","Put","Req","Body","authRequest","Post","Get","Promise","Delete","Patch","Controller","AddressService","AddressModule","Module","imports","TypeOrmModule","forFeature","controllers","providers","exports","GenericService","addressRepository","super","Injectable","InjectRepository","Repository","AppController","appService","getData","test","getCat","getDog","AppService","AppModule","AuthModule","ConfigModule","forRoot","ormconfig","ServeStaticModule","rootPath","join","__dirname","UserModule","ExchangeDateModule","TransactionModule","VehicleModule","RecieverModule","PackageModule","ContactUsModule","message","getHello","AUTH0_AUDIENCE","process","env","AUTH0_DOMAIN","canActivate","context","getArgByIndex","res","checkJwt","promisify","jwt","secret","expressJwtSecret","cache","rateLimit","jwksRequestsPerMinute","jwksUri","audience","issuer","algorithms","error","UnauthorizedException","reflector","getArgs","userRoles","AUTH0_ROLES","requiredRoles","get","getHandler","hasAllRequiredRoles","every","permission","includes","length","ForbiddenException","Reflector","roles","SetMetadata","myExchangeDateDto","IsEmail","ContactUsController","contactUsRepository","result","save","exchangeDateDto","IsDateString","ExchangeDateController","exchangeDateService","getMyExchangeDates","relations","loadRelationIds","getByPackageId","addressId","startDate","endDate","Param","ExchangeDateService","exchangeDateRepository","item","repository","findOne","NotFoundException","options","data","config","host","port","username","password","database","entities","synchronize","migrationsRun","logging","logger","migrations","cli","migrationsDir","idDateDto","packageDto","Matches","IsBoolean","assignMeDto","PackageController","packageService","vehicleService","price","createWithAddress","getMyPackages","getMyPackagesWithAddress","getAcceptable","vehicleId","getAccepted","shippingDate","assignMe","postDate","sent","fromAddressId","n","currentCity","getAvaibleDates","getPackageByVehicleId","shipped","packag","veh","toISOString","PackageService","VehicleService","packageRepository","recieverWithAddressDto","IsPhoneNumber","RecieverController","recieverService","firstName","lastName","email","phoneNumber","getMyRecieveres","addressIds","map","RecieveresByAddressIds","RecieverService","recieverRepository","all","getRecByAdId","concat","buyDto","TransactionController","transactionService","getMyTransactions","buy","tra","amount","direction","TransactionService","transactionRepository","UserController","userService","getMyData","getAllUsername","new","deletee","modify","newUser","addUserRole","updatee","addShipperRole","userMinDto","userUpdateDto","FindManyOptions","UserService","HttpModule","userRepository","httpService","undefined","headers","authorization","AUTH0_API_TOKEN","post","subscribe","authId","ConflictException","HttpService","vehicleDto","myVehicleDto","VehicleController","getMyVehicles","newVehicle","vehicleRepository","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","app","NestFactory","enableCors","useGlobalPipes","ValidationPipe","setGlobalPrefix","PORT","listen","Logger","log","bootstrap"],"sourceRoot":""}