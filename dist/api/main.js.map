{"version":3,"file":"main.js","mappings":"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","sources":["webpack://stabox/./apps/api/src/Entities/address.entity.ts","webpack://stabox/./apps/api/src/Entities/exchangeDate.entity.ts","webpack://stabox/./apps/api/src/Entities/index.ts","webpack://stabox/./apps/api/src/Entities/package.entity.ts","webpack://stabox/./apps/api/src/Entities/reciever.entity.ts","webpack://stabox/./apps/api/src/Entities/transaction.entity.ts","webpack://stabox/./apps/api/src/Entities/user.entity.ts","webpack://stabox/./apps/api/src/Entities/vehicle.entity.ts","webpack://stabox/./apps/api/src/app/address/address.controller.ts","webpack://stabox/./apps/api/src/app/address/address.module.ts","webpack://stabox/./apps/api/src/app/address/address.service.ts","webpack://stabox/./apps/api/src/app/app.controller.ts","webpack://stabox/./apps/api/src/app/app.module.ts","webpack://stabox/./apps/api/src/app/app.service.ts","webpack://stabox/./apps/api/src/app/auth/auth.guard.ts","webpack://stabox/./apps/api/src/app/auth/auth.module.ts","webpack://stabox/./apps/api/src/app/auth/authRequest.interface.ts","webpack://stabox/./apps/api/src/app/auth/index.ts","webpack://stabox/./apps/api/src/app/auth/role.guard.ts","webpack://stabox/./apps/api/src/app/auth/roles.decorator.ts","webpack://stabox/./apps/api/src/app/exchange-date/exchange-date.controller.ts","webpack://stabox/./apps/api/src/app/exchange-date/exchange-date.module.ts","webpack://stabox/./apps/api/src/app/exchange-date/exchange-date.service.ts","webpack://stabox/./apps/api/src/app/generics/generic.service.ts","webpack://stabox/./apps/api/src/app/ormconfig.ts","webpack://stabox/./apps/api/src/app/package/package.controller.ts","webpack://stabox/./apps/api/src/app/package/package.module.ts","webpack://stabox/./apps/api/src/app/package/package.service.ts","webpack://stabox/./apps/api/src/app/reciever/reciever.controller.ts","webpack://stabox/./apps/api/src/app/reciever/reciever.module.ts","webpack://stabox/./apps/api/src/app/reciever/reciever.service.ts","webpack://stabox/./apps/api/src/app/transaction/transaction.controller.ts","webpack://stabox/./apps/api/src/app/transaction/transaction.module.ts","webpack://stabox/./apps/api/src/app/transaction/transaction.service.ts","webpack://stabox/./apps/api/src/app/user/user.controller.ts","webpack://stabox/./apps/api/src/app/user/user.module.ts","webpack://stabox/./apps/api/src/app/user/user.service.ts","webpack://stabox/./apps/api/src/app/user/userMin.DTO.ts","webpack://stabox/./apps/api/src/app/user/userUpdate.DTO.ts","webpack://stabox/./apps/api/src/app/vehicle/vehicle.controller.ts","webpack://stabox/./apps/api/src/app/vehicle/vehicle.module.ts","webpack://stabox/./apps/api/src/app/vehicle/vehicle.service.ts","webpack://stabox/external commonjs \"@nestjs/axios\"","webpack://stabox/external commonjs \"@nestjs/common\"","webpack://stabox/external commonjs \"@nestjs/config\"","webpack://stabox/external commonjs \"@nestjs/core\"","webpack://stabox/external commonjs \"@nestjs/typeorm\"","webpack://stabox/external commonjs \"class-validator\"","webpack://stabox/external commonjs \"express-jwt\"","webpack://stabox/external commonjs \"jwks-rsa\"","webpack://stabox/external commonjs \"tslib\"","webpack://stabox/external commonjs \"typeorm\"","webpack://stabox/external node-commonjs \"util\"","webpack://stabox/webpack/bootstrap","webpack://stabox/./apps/api/src/main.ts"],"sourcesContent":["import {\r\n  Column,\r\n  Entity,\r\n  ManyToOne,\r\n  OneToMany,\r\n  PrimaryGeneratedColumn,\r\n} from 'typeorm';\r\nimport { exchangeDateEntity, packageEntity, userEntity } from '.';\r\nimport { recieverEntity } from './reciever.entity';\r\nimport { addressInterface } from '@stabox/stabox-lib';\r\n\r\n@Entity()\r\nexport class addressEntity implements addressInterface {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  userId: string;\r\n\r\n  @ManyToOne(() => userEntity, (user) => user.addresses)\r\n  user: userEntity;\r\n\r\n  @Column()\r\n  country: string;\r\n\r\n  @Column()\r\n  zipCode: number;\r\n\r\n  @Column()\r\n  cityName: string;\r\n\r\n  @Column()\r\n  street: string;\r\n\r\n  @Column()\r\n  houseNumber: string;\r\n\r\n  @Column({ nullable: true })\r\n  name: string;\r\n\r\n  @Column({ default: false })\r\n  isDeleted: boolean;\r\n\r\n  //Relations\r\n  @OneToMany(() => recieverEntity, (reciever) => reciever.address)\r\n  recievers: recieverEntity[];\r\n\r\n  @OneToMany(() => exchangeDateEntity, (exchangeDate) => exchangeDate.address)\r\n  exchangeDates: exchangeDateEntity[];\r\n\r\n  @OneToMany(() => packageEntity, (package_) => package_.fromAddress) // \"package\" is a reserved word for js\r\n  packages: packageEntity[];\r\n}\r\n","import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { addressEntity, userEntity } from '.';\r\n\r\n@Entity()\r\nexport class exchangeDateEntity {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  // @Column()\r\n  // userId: string;\r\n  // @ManyToOne(() => userEntity, (user) => user)\r\n  // user: userEntity;\r\n\r\n  @Column()\r\n  addressId;\r\n\r\n  @ManyToOne(() => addressEntity, (address) => address)\r\n  address: addressEntity;\r\n\r\n  @Column()\r\n  startDate: Date;\r\n\r\n  @Column()\r\n  endDate: Date;\r\n}\r\n","export * from './package.entity';\r\nexport * from './vehicle.entity';\r\nexport * from './transaction.entity';\r\nexport * from './user.entity';\r\nexport * from './address.entity';\r\nexport * from './exchangeDate.entity';\r\nexport * from './reciever.entity';\r\n","import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { addressEntity, userEntity, vehicleEntity } from '.';\r\nimport { recieverEntity } from './reciever.entity';\r\n\r\n@Entity()\r\nexport class packageEntity {\r\n  //Columns\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  userId: string;\r\n\r\n  @Column({ nullable: true })\r\n  vehicleId: number;\r\n\r\n  @ManyToOne(() => vehicleEntity, (vehicle) => vehicle.id)\r\n  vehicle: vehicleEntity;\r\n\r\n  @ManyToOne(() => userEntity, (user) => user.packages)\r\n  user: userEntity;\r\n\r\n  @Column()\r\n  recieverId: number;\r\n\r\n  @ManyToOne(() => recieverEntity, (reciever) => reciever.package)\r\n  reciever: recieverEntity;\r\n\r\n  @Column()\r\n  fromAddressId: number;\r\n\r\n  @ManyToOne(() => addressEntity, (fromAddress) => fromAddress.packages)\r\n  fromAddress: addressEntity;\r\n\r\n  @Column()\r\n  postDate: Date;\r\n\r\n  @Column()\r\n  shippingDate: Date;\r\n\r\n  @Column()\r\n  size: string;\r\n\r\n  @Column()\r\n  weight: string;\r\n\r\n  @Column()\r\n  fragile: boolean;\r\n\r\n  @Column()\r\n  price: number;\r\n\r\n  @Column()\r\n  currentCity: number;\r\n\r\n  @Column()\r\n  name: string;\r\n}\r\n","import {\r\n  Column,\r\n  Entity,\r\n  ManyToOne,\r\n  OneToMany,\r\n  PrimaryGeneratedColumn,\r\n} from 'typeorm';\r\nimport { addressEntity, packageEntity } from '.';\r\n\r\n@Entity()\r\nexport class recieverEntity {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  addressId: number;\r\n\r\n  @ManyToOne((type) => addressEntity, (address) => address.recievers)\r\n  address: addressEntity;\r\n\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  @Column()\r\n  email: string;\r\n\r\n  @Column()\r\n  phoneNumber: string;\r\n\r\n  //Relations\r\n  @OneToMany((type) => packageEntity, (package_) => package_.reciever)\r\n  package: packageEntity[];\r\n}\r\n","import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { userEntity } from '.';\r\n\r\n@Entity()\r\nexport class transactionEntity {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  userId: number;\r\n\r\n  @ManyToOne(() => userEntity, (user) => user.transactions)\r\n  user: userEntity;\r\n\r\n  @Column()\r\n  amount: number;\r\n\r\n  @Column()\r\n  direction: boolean;\r\n\r\n  @Column('timestamp')\r\n  timeStamp: Date;\r\n}\r\n","import { Column, Entity, OneToMany, PrimaryColumn } from 'typeorm';\r\nimport {\r\n  addressEntity,\r\n  exchangeDateEntity,\r\n  packageEntity,\r\n  transactionEntity,\r\n  vehicleEntity,\r\n} from '.';\r\n\r\n@Entity()\r\nexport class userEntity {\r\n  //Columns\r\n  @PrimaryColumn()\r\n  id: string;\r\n\r\n  @Column({ unique: true })\r\n  email: string;\r\n\r\n  @Column()\r\n  username: string;\r\n\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  @Column()\r\n  phoneNumber: string;\r\n\r\n  @Column({ default: 0 })\r\n  stabucks: number;\r\n\r\n  //Relations\r\n  @OneToMany(() => transactionEntity, (transaction) => transaction.user)\r\n  transactions: transactionEntity[];\r\n\r\n  @OneToMany(() => vehicleEntity, (vehicles) => vehicles.user)\r\n  vehicles: vehicleEntity[];\r\n\r\n  @OneToMany(() => packageEntity, (package_) => package_.user) // package name is reserved in 'strict mode'\r\n  packages: packageEntity[];\r\n\r\n  @OneToMany(() => addressEntity, (address) => address.user) // package name is reserved in 'strict mode'\r\n  addresses: addressEntity[];\r\n}\r\n","import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { userEntity } from '.';\r\n\r\n@Entity()\r\nexport class vehicleEntity {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  userId: string;\r\n\r\n  @ManyToOne(() => userEntity, (user) => user.vehicles)\r\n  user: userEntity;\r\n\r\n  @Column()\r\n  name: string;\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  MethodNotAllowedException,\r\n  Patch,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsNotEmpty, IsNumber, IsString, NotEquals } from 'class-validator';\r\nimport { addressEntity } from '../../Entities';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { AddressService } from './address.service';\r\nimport { Not } from 'typeorm';\r\n\r\nclass idDto {\r\n  @IsNumber()\r\n  id: number;\r\n}\r\n\r\nclass addressDto {\r\n  @IsString()\r\n  country: string;\r\n  @IsNumber()\r\n  zipCode: number;\r\n  @IsString()\r\n  cityName: string;\r\n  @IsString()\r\n  street: string;\r\n  @IsString()\r\n  houseNumber: string;\r\n  @IsString()\r\n  name: string;\r\n}\r\n\r\nclass myAddressDto {\r\n  @IsNumber()\r\n  id: number;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  country: string;\r\n  @IsNumber()\r\n  @NotEquals(0)\t\r\n  zipCode: number;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  cityName: string;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  street: string;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  houseNumber: string;\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  name: string;\r\n}\r\n\r\n@Controller('address')\r\nexport class AddressController {\r\n  constructor(private readonly addressService: AddressService) {}\r\n\r\n  //creates address\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Put()\r\n  create(@Req() req: authRequest, @Body() body: addressDto) {\r\n    return this.addressService.create({\r\n      id: 0,\r\n      userId: req.user.sub,\r\n      country: body.country,\r\n      zipCode: body.zipCode,\r\n      cityName: body.cityName,\r\n      street: body.street,\r\n      houseNumber: body.houseNumber,\r\n      name: body.name,\r\n    });\r\n  }\r\n\r\n  // gets all addresses\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post('/all')\r\n  getAll() {\r\n    return this.addressService.getAll();\r\n  }\r\n\r\n  // gets user's all address\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get()\r\n  getMyAddresses(@Req() req: authRequest): Promise<addressEntity[]> {\r\n    return this.addressService.find({\r\n      where: { userId: req.user.sub, name: Not(''), isDeleted: false },\r\n    });\r\n  }\r\n\r\n  // gets user's own addresses\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get('/reciever')\r\n  getMyRecieverAddresses(@Req() req: authRequest): Promise<addressEntity[]> {\r\n    return this.addressService.find({\r\n      where: { userId: req.user.sub, name: '', isDeleted: false },\r\n    });\r\n  }\r\n\r\n  // delete own address\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Delete()\r\n  delete(@Req() req: authRequest, @Body() body: idDto) {\r\n    return this.addressService.getById(body.id).then((a: addressEntity) => {\r\n      if (a.userId == req.user.sub) {\r\n        a.isDeleted = true;\r\n        return this.addressService.update(body.id, a).then(() => {\r\n          return this.addressService.delete(body.id);\r\n        });\r\n        // this.update(req, a)\r\n        // throw new MethodNotAllowedException(\r\n        //   'done'\r\n        // ); \r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only delete your own address'\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  //modify own address\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Patch()\r\n  update(@Req() req: authRequest, @Body() body: myAddressDto) {\r\n    return this.addressService.getById(body.id).then((a) => {\r\n      if (a.userId == req.user.sub) {\r\n        const newDates: addressDto = {\r\n          country: body.country,\r\n          zipCode: body.zipCode,\r\n          cityName: body.cityName,\r\n          street: body.street,\r\n          houseNumber: body.houseNumber,\r\n          name: body.name,\r\n        };\r\n        return this.addressService.update(body.id, newDates);\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only modify your own address'\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { addressEntity } from '../../Entities';\r\nimport { AddressController } from './address.controller';\r\nimport { AddressService } from './address.service';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([addressEntity])],\r\n  controllers: [AddressController],\r\n  providers: [AddressService],\r\n  exports: [AddressService],\r\n})\r\nexport class AddressModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { addressEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\n@Injectable()\r\nexport class AddressService extends GenericService<addressEntity> {\r\n  constructor(\r\n    @InjectRepository(addressEntity)\r\n    private addressRepository: Repository<addressEntity>\r\n  ) {\r\n    super(addressRepository);\r\n  }\r\n}\r\n","import { Controller, Get, Req, UseGuards } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\nimport { AuthGuard, authRequest, RoleGuard } from './auth';\r\nimport { Roles } from './auth/roles.decorator';\r\n\r\n@Controller()\r\nexport class AppController {\r\n  constructor(private readonly appService: AppService) {}\r\n\r\n  //needs to be logged in\r\n  @UseGuards(AuthGuard)\r\n  @Get('hello')\r\n  getData(@Req() req: authRequest) {\r\n    return req.user;\r\n  }\r\n\r\n  //simple test\r\n  @Get('test')\r\n  test() {\r\n    return \"workss\";\r\n  }\r\n\r\n  //needs admin role\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Get('/cat')\r\n  getCat(): string {\r\n    return this.appService.getCat();\r\n  }\r\n\r\n  @Get('/dog')\r\n  getDog(@Req() req): string {\r\n    return req.user + ' and a dog';\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { UserModule } from './user/user.module';\r\nimport { AuthModule } from './auth/auth.module';\r\nimport { ExchangeDateModule } from './exchange-date/exchange-date.module';\r\nimport { TransactionModule } from './transaction/transaction.module';\r\nimport { VehicleModule } from './vehicle/vehicle.module';\r\nimport { AddressModule } from './address/address.module';\r\nimport { RecieverModule } from './reciever/reciever.module';\r\nimport { PackageModule } from './package/package.module';\r\nimport ormconfig = require('./ormconfig');\r\n\r\n@Module({\r\n  imports: [\r\n    AuthModule,\r\n    ConfigModule.forRoot(),\r\n    TypeOrmModule.forRoot(ormconfig),\r\n    UserModule,\r\n    ExchangeDateModule,\r\n    TransactionModule,\r\n    VehicleModule,\r\n    AddressModule,\r\n    RecieverModule,\r\n    PackageModule,\r\n  ],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { Message } from '@stabox/stabox-lib';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  getData(): Message {\r\n    return { message: 'Welcome to api!' };\r\n  }\r\n  getDog(): string {\r\n    return 'woof';\r\n  }\r\n  getCat(): string {\r\n    return 'meow';\r\n  }\r\n\r\n  getHello(): string {\r\n    return 'Hello World!';\r\n  }\r\n}\r\n","import {\r\n  CanActivate,\r\n  ExecutionContext,\r\n  Injectable,\r\n  UnauthorizedException,\r\n} from '@nestjs/common';\r\nimport { expressJwtSecret } from 'jwks-rsa';\r\nimport { promisify } from 'util';\r\nimport * as jwt from 'express-jwt';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  private AUTH0_AUDIENCE: string;\r\n  private AUTH0_DOMAIN: string;\r\n\r\n  constructor() {\r\n    this.AUTH0_AUDIENCE = process.env.AUTH0_AUDIENCE;\r\n    this.AUTH0_DOMAIN = process.env.AUTH0_DOMAIN;\r\n  }\r\n\r\n  async canActivate(context: ExecutionContext): Promise<boolean> {\r\n    const req = context.getArgByIndex(0);\r\n    const res = context.getArgByIndex(1);\r\n\r\n    const checkJwt = promisify(\r\n      jwt({\r\n        secret: expressJwtSecret({\r\n          cache: true,\r\n          rateLimit: true,\r\n          jwksRequestsPerMinute: 5,\r\n          jwksUri: `${this.AUTH0_DOMAIN}.well-known/jwks.json`,\r\n        }),\r\n        audience: this.AUTH0_AUDIENCE,\r\n        issuer: this.AUTH0_DOMAIN,\r\n        algorithms: ['RS256'],\r\n      })\r\n    );\r\n\r\n    try {\r\n      await checkJwt(req, res);\r\n      return true;\r\n    } catch (error) {\r\n      throw new UnauthorizedException(error);\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\n\r\n@Module({})\r\nexport class AuthModule {}\r\n","export interface authRequest extends Request {\r\n  user: {\r\n    'https://www.stabox.hu/roles': string[];\r\n    given_name: string;\r\n    family_name: string;\r\n    nickname: string;\r\n    name: string;\r\n    picture: string;\r\n    locale: string;\r\n    updated_at: string;\r\n    iss: string;\r\n    sub: string;\r\n    aud: string;\r\n    iat: number;\r\n    exp: number;\r\n    auth_time: number;\r\n  };\r\n}\r\n/*\r\n\"https://www.stabox.hu/roles\": [\r\n    \"admin\",\r\n    \"Cat person\"\r\n  ],\r\n  \"given_name\": \"Princzes\",\r\n  \"family_name\": \"Barnabás\",\r\n  \"nickname\": \"barni.pbs\",\r\n  \"name\": \"Princzes Barnabás\",\r\n  \"picture\": \"https://lh3.googleusercontent.com/a-/AOh14GiL0zvdT_-Kx5_1Y14i_EOgid0e_Pfpd5ceiFwm=s96-c\",\r\n  \"locale\": \"hu\",\r\n  \"updated_at\": \"2022-01-28T12:23:33.644Z\",\r\n  \"iss\": \"https://barni363hun.eu.auth0.com/\",\r\n  \"sub\": \"google-oauth2|109681074907317705948\",\r\n  \"aud\": \"70x759xfYo7pvQS39ptmBpnpBRv8MUkA\",\r\n  \"iat\": 1643372614,\r\n  \"exp\": 1643408614,\r\n  \"auth_time\": 1643372613\r\n*/\r\n","export * from './auth.guard';\r\nexport * from './role.guard';\r\nexport * from './authRequest.interface';\r\n","import {\r\n  CanActivate,\r\n  ExecutionContext,\r\n  ForbiddenException,\r\n  Injectable,\r\n} from '@nestjs/common';\r\nimport { Reflector } from '@nestjs/core';\r\n\r\n@Injectable()\r\nexport class RoleGuard implements CanActivate {\r\n  constructor(private reflector: Reflector) {}\r\n  canActivate(context: ExecutionContext): boolean {\r\n    const [req] = context.getArgs();\r\n    const userRoles = req?.user[process.env.AUTH0_ROLES] || [];\r\n    const requiredRoles = this.reflector.get('roles', context.getHandler());\r\n    const hasAllRequiredRoles = requiredRoles.every((permission) =>\r\n      userRoles.includes(permission)\r\n    );\r\n    if (requiredRoles.length === 0 || hasAllRequiredRoles) {\r\n      return true;\r\n    }\r\n    throw new ForbiddenException('Insufficient Roles');\r\n  }\r\n}\r\n","import { SetMetadata } from '@nestjs/common';\r\n\r\nexport const Roles = (...roles: string[]) => SetMetadata('roles', roles);\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  MethodNotAllowedException,\r\n  Param,\r\n  Patch,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsDateString, IsNumber } from 'class-validator';\r\nimport { exchangeDateEntity } from '../../Entities';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { ExchangeDateService } from './exchange-date.service';\r\n\r\nclass idDto {\r\n  @IsNumber()\r\n  id: number;\r\n}\r\n\r\nclass exchangeDateDto {\r\n  @IsDateString()\r\n  startDate: Date;\r\n  @IsDateString()\r\n  endDate: Date;\r\n  @IsNumber()\r\n  addressId: number;\r\n}\r\n\r\nclass myExchangeDateDto {\r\n  @IsNumber()\r\n  id: number;\r\n  @IsDateString()\r\n  startDate: Date;\r\n  @IsDateString()\r\n  endDate: Date;\r\n  @IsNumber()\r\n  addressId: number;\r\n}\r\n\r\n@Controller('EXdate')\r\nexport class ExchangeDateController {\r\n  constructor(private readonly exchangeDateService: ExchangeDateService) {}\r\n\r\n  //creates exchangeDate\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Put()\r\n  create(@Req() req: authRequest, @Body() body: exchangeDateDto) {\r\n    return this.exchangeDateService.create({\r\n      ...body,\r\n    });\r\n  }\r\n\r\n  // gets all exchange dates\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post('/all')\r\n  getAll() {\r\n    return this.exchangeDateService.getAll();\r\n  }\r\n\r\n  // gets user's all exchange date\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get()\r\n  getMyExchangeDates(@Req() req: authRequest): Promise<exchangeDateEntity[]> {\r\n    return this.exchangeDateService.find({\r\n      where: { address: { userId: req.user.sub } },\r\n      relations: ['address'],\r\n      loadRelationIds: false,\r\n    });\r\n  }\r\n\r\n  // gets exchange date by id\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get('/package/:id')\r\n  getByPackageId(\r\n    @Req() req: authRequest,\r\n    @Param() id: number\r\n  ): Promise<exchangeDateEntity[]> {\r\n    return this.exchangeDateService.find({\r\n      where: { addressId:id },\r\n      relations: ['address'],\r\n      //TODO!!! : get package's exhange date\r\n    });\r\n  }\r\n\r\n  // delete own exchange date\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Delete()\r\n  delete(@Req() req: authRequest, @Body() body: idDto) {\r\n    // TODO errors, rework\r\n    return this.exchangeDateService.getById(body.id).then((a) => {\r\n      if (a.address.userId == req.user.sub) {\r\n        return this.exchangeDateService.delete(body.id);\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only delete your own exchange dates'\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  //modify own exchange date\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Patch()\r\n  update(@Req() req: authRequest, @Body() body: myExchangeDateDto) {\r\n    return this.exchangeDateService.getById(body.id).then((a) => {\r\n      if (a.address.userId == req.user.sub) {\r\n        return this.exchangeDateService.update(body.id, {\r\n          startDate: body.startDate,\r\n          endDate: body.endDate,\r\n          addressId: body.addressId,\r\n        });\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only modify your own exchange dates'\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { exchangeDateEntity } from '../../Entities';\r\nimport { UserModule } from '../user/user.module';\r\nimport { ExchangeDateController } from './exchange-date.controller';\r\nimport { ExchangeDateService } from './exchange-date.service';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([exchangeDateEntity]), UserModule],\r\n  controllers: [ExchangeDateController],\r\n  providers: [ExchangeDateService],\r\n  exports: [ExchangeDateService],\r\n})\r\nexport class ExchangeDateModule {}\r\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { exchangeDateEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\n@Injectable()\r\nexport class ExchangeDateService extends GenericService<exchangeDateEntity> {\r\n  constructor(\r\n    @InjectRepository(exchangeDateEntity)\r\n    private exchangeDateRepository: Repository<exchangeDateEntity>\r\n  ) {\r\n    super(exchangeDateRepository);\r\n  }\r\n  async getById(id: number): Promise<exchangeDateEntity> {\r\n    const item = await this.repository.findOne(id, { relations: ['address'] });\r\n    if (!item) {\r\n      throw new NotFoundException('NOT_FOUND');\r\n    }\r\n    return item;\r\n  }\r\n}\r\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport {\r\n  DeleteResult,\r\n  FindManyOptions,\r\n  Repository,\r\n  UpdateResult,\r\n} from 'typeorm';\r\n\r\n@Injectable()\r\nexport abstract class GenericService<T> {\r\n  constructor(protected readonly repository: Repository<T>) { }\r\n\r\n  async getAll(): Promise<T[]> {\r\n    return await this.repository.find();\r\n  }\r\n\r\n  async getById(id: number): Promise<T> {\r\n    const item = await this.repository.findOne(id);\r\n    if (!item) {\r\n      throw new NotFoundException('NOT_FOUND');\r\n    }\r\n    return item;\r\n  }\r\n\r\n  async find(options?: FindManyOptions<T>): Promise<T[]> {\r\n    return await this.repository.find(options);\r\n  }\r\n\r\n  async create(data: object): Promise<T> {\r\n    const result = this.repository.create(data);\r\n    return await this.repository.save(result);\r\n  }\r\n\r\n  async update(id: number, data: object): Promise<UpdateResult> {\r\n    return await this.repository.update(id, data);\r\n  }\r\n\r\n  async delete(id: number): Promise<DeleteResult> {\r\n    return await this.repository.delete(id);\r\n  }\r\n}\r\n","import { MysqlConnectionOptions } from 'typeorm/driver/mysql/MysqlConnectionOptions';\r\nimport {\r\n  addressEntity,\r\n  exchangeDateEntity,\r\n  packageEntity,\r\n  recieverEntity,\r\n  transactionEntity,\r\n  userEntity,\r\n  vehicleEntity,\r\n} from '../Entities';\r\n\r\n// You can load you .env file here synchronously using dotenv package (not installed here),\r\n// import * as dotenv from 'dotenv';\r\n// import * as fs from 'fs';\r\n// const environment = process.env.NODE_ENV || 'development';\r\n// const data: any = dotenv.parse(fs.readFileSync(`${environment}.env`));\r\n// You can also make a singleton service that load and expose the .env file content.\r\n// ...\r\n\r\n//!!!\r\n//!!! We can't get the db informations from .env\r\n//!!!\r\n\r\n// Check typeORM documentation for more information.\r\nconst config: MysqlConnectionOptions = {\r\n  type: 'mysql',\r\n  host: 'eu-cdbr-west-02.cleardb.net',\r\n  port: 3306,\r\n  username: 'ba26dd00a399fa',\r\n  password: 'c2095f8f',\r\n  database: 'heroku_eb31e99ed1af12a',\r\n  entities: [\r\n    userEntity,\r\n    addressEntity,\r\n    exchangeDateEntity,\r\n    packageEntity,\r\n    recieverEntity,\r\n    vehicleEntity,\r\n    transactionEntity,\r\n  ],\r\n\r\n  // We are using migrations, synchronize should be set to false.\r\n  synchronize: true,\r\n\r\n  // Run migrations automatically,\r\n  // you can disable this if you prefer running migration manually.\r\n  migrationsRun: false,\r\n  logging: false,\r\n  logger: 'file',\r\n\r\n  // allow both start:prod and start:dev to use migrations\r\n  // __dirname is either dist or src folder, meaning either\r\n  // the compiled js in prod or the ts in dev\r\n  migrations: ['dist/src/migrations/**/*{.ts,.js}'],\r\n  cli: {\r\n    migrationsDir: 'src/migrations',\r\n  },\r\n};\r\n\r\nexport = config;\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  MethodNotAllowedException,\r\n  Patch,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsBoolean, IsDateString, IsNumber, IsString, Matches } from 'class-validator';\r\nimport { Not } from 'typeorm';\r\nimport { packageEntity } from '../../Entities';\r\nimport { AddressService } from '../address/address.service';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { ExchangeDateService } from '../exchange-date/exchange-date.service';\r\nimport { VehicleService } from '../vehicle/vehicle.service';\r\nimport { PackageService } from './package.service';\r\n\r\nclass idDto {\r\n  @IsNumber()\r\n  id: number;\r\n}\r\n\r\nclass idDateDto {\r\n  @IsNumber()\r\n  id: number;\r\n  // @IsDateString()\r\n  // shipped: Date;\r\n}\r\n\r\nclass packageDto {\r\n  @IsString()\r\n  @Matches('[0-9]+x[0-9]+x[0-9]+')\r\n  size: string;\r\n  @IsString()\r\n  @Matches('([0-9]+gramm|[0-9]+kilogramm)')\r\n  weight: string;\r\n  @IsBoolean()\r\n  fragile: boolean;\r\n  @IsNumber()\r\n  fromAddressId: number;\r\n  @IsString()\r\n  name: string;\r\n  @IsNumber()\r\n  recieverId: number;\r\n}\r\n\r\nclass assignMeDto {\r\n  @IsNumber()\r\n  id: number;\r\n  @IsNumber()\r\n  vehicleId: number;\r\n  @IsDateString()\r\n  postDate: Date;\r\n}\r\n\r\n@Controller('package')\r\nexport class PackageController {\r\n  constructor(\r\n    private readonly packageService: PackageService,\r\n    private readonly addressService: AddressService,\r\n    private readonly exchangeDateService: ExchangeDateService,\r\n    private readonly vehicleService: VehicleService\r\n  ) {}\r\n\r\n  //creates package\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Put()\r\n  create(@Req() req: authRequest, @Body() body: packageDto) {\r\n    return this.packageService.create({\r\n      userId: req.user.sub,\r\n      price: 500,\r\n      ...body,\r\n    });\r\n  }\r\n\r\n  //create package with address\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Put('/add')\r\n  createWithAddress(@Req() req: authRequest, @Body() body: packageDto) {\r\n    return this.packageService.create({\r\n      userId: req.user.sub,\r\n      price: 500,\r\n      ...body,\r\n    });\r\n  }\r\n\r\n  // gets all packages\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Post('/all')\r\n  getAll() {\r\n    return this.packageService.getAll();\r\n  }\r\n\r\n  // gets user packages\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get()\r\n  getMyPackages(@Req() req: authRequest): Promise<packageEntity[]> {\r\n    return this.packageService.find({\r\n      where: { userId: req.user.sub },\r\n    });\r\n  }\r\n\r\n  //returns user's own packages\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get('/mypackages')\r\n  getMyPackagesWithAddress(@Req() req: authRequest): Promise<packageEntity[]> {\r\n    return this.packageService.find({\r\n      where: { userId: req.user.sub },\r\n      relations: ['fromAddress'],\r\n    });\r\n  }\r\n  // gets acceptable packages\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Get('/acceptable')\r\n  getAcceptable(@Req() req: authRequest): Promise<packageEntity[]> {\r\n    return this.packageService.find({\r\n      where: { vehicleId: null, userId: Not(req.user.sub) },\r\n      relations: ['fromAddress'],\r\n    });\r\n  }\r\n  // gets accepted packages\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Get('/accepted')\r\n  getAccepted(@Req() req: authRequest): Promise<packageEntity[]> {\r\n    return this.packageService.find({\r\n      where: {\r\n        shippingDate: false,\r\n        vehicle: {\r\n          userId: req.user.sub,\r\n        },\r\n      },\r\n      relations: ['fromAddress', 'vehicle'],\r\n    });\r\n  }\r\n\r\n  // delete own package\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Delete()\r\n  delete(@Req() req: authRequest, @Body() body: idDto) {\r\n    return this.packageService.getById(body.id).then((a) => {\r\n      if (a.userId == req.user.sub) {\r\n        return this.packageService.delete(body.id);\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only delete your own package'\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  //assign vehicle, select post date\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Patch()\r\n  assignMe(@Req() req: authRequest, @Body() body: assignMeDto) {\r\n    return this.packageService.getById(body.id).then((a) => {\r\n      if (a.userId !== req.user.sub) {\r\n        return this.packageService.update(body.id, {\r\n          vehicleId: body.vehicleId,\r\n          postDate: body.postDate,\r\n        });\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can not accept your own package'\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  //sent\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Post()\r\n  async sent(@Req() req: authRequest, @Body() body: idDto) {\r\n    return this.packageService.getById(body.id).then((a) => {\r\n      if (a.vehicleId == 0) {\r\n        return this.addressService.getById(a.fromAddressId).then((n) => {\r\n          return this.packageService.update(body.id, {\r\n            currentCity: n.cityName,\r\n          });\r\n        });\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only assign to a package without a shipper'\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  //getAvaibleDates\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Get('/dates')\r\n  async getAvaibleDates(@Req() req: authRequest, @Body() body: idDto) {\r\n    return this.packageService.getById(body.id).then((a) => {\r\n      return this.exchangeDateService.find({\r\n        where: { address: { userId: a.userId } },\r\n      });\r\n    });\r\n  }\r\n\r\n  // gets shipper's all package\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Get('/vehicle')\r\n  getPackageByVehicleId(\r\n    @Req() req: authRequest,\r\n    @Body() body: idDto\r\n  ): Promise<packageEntity[]> {\r\n    return this.packageService.find({\r\n      where: { vehicleId: body.id },\r\n    });\r\n  }\r\n\r\n  //adds \"shipped\" date\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Post('/shipped')\r\n  shipped(@Req() req: authRequest, @Body() body: idDateDto) {\r\n    return this.packageService\r\n      .find({\r\n        where: { id: body.id },\r\n      })\r\n      .then((packag) => {\r\n        return this.vehicleService.getById(packag[0].vehicleId).then((veh) => {\r\n          if (veh.userId == req.user.sub) {\r\n            return this.packageService.update(body.id, {\r\n              shippingDate: new Date().toISOString(),\r\n            });\r\n          } else {\r\n            throw new MethodNotAllowedException(\r\n              'You can only approve packages shipped by you'\r\n            );\r\n          }\r\n        });\r\n      });\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { packageEntity } from '../../Entities';\r\nimport { AddressModule } from '../address/address.module';\r\nimport { ExchangeDateModule } from '../exchange-date/exchange-date.module';\r\nimport { VehicleModule } from '../vehicle/vehicle.module';\r\nimport { PackageController } from './package.controller';\r\nimport { PackageService } from './package.service';\r\n\r\n@Module({\r\n  imports: [\r\n    TypeOrmModule.forFeature([packageEntity]),\r\n    AddressModule,\r\n    ExchangeDateModule,\r\n    VehicleModule,\r\n  ],\r\n  controllers: [PackageController],\r\n  providers: [PackageService],\r\n})\r\nexport class PackageModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { packageEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\n@Injectable()\r\nexport class PackageService extends GenericService<packageEntity> {\r\n  constructor(\r\n    @InjectRepository(packageEntity)\r\n    private packageRepository: Repository<packageEntity>\r\n  ) {\r\n    super(packageRepository);\r\n\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsEmail, IsNumber, IsPhoneNumber, IsString } from 'class-validator';\r\nimport { AddressService } from '../address/address.service';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { RecieverService } from './reciever.service';\r\n\r\nclass recieverWithAddressDto {\r\n  @IsString()\r\n  firstName: string;\r\n  @IsString()\r\n  lastName: string;\r\n  @IsEmail()\r\n  email: string;\r\n  @IsPhoneNumber()\r\n  phoneNumber: string;\r\n  @IsString()\r\n  country: string;\r\n  @IsNumber()\r\n  zipCode: number;\r\n  @IsString()\r\n  cityName: string;\r\n  @IsString()\r\n  street: string;\r\n  @IsNumber()\r\n  houseNumber: number;\r\n}\r\n\r\n@Controller('reciever')\r\nexport class RecieverController {\r\n  constructor(\r\n    private readonly recieverService: RecieverService,\r\n    private readonly addressService: AddressService\r\n  ) {}\r\n\r\n  //creates reciever with address\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Put()\r\n  createWithAddress(\r\n    @Req() req: authRequest,\r\n    @Body() body: recieverWithAddressDto\r\n  ) {\r\n    return this.addressService\r\n      .create({\r\n        id: 0,\r\n        userId: req.user.sub,\r\n        country: body.country,\r\n        zipCode: body.zipCode,\r\n        cityName: body.cityName,\r\n        street: body.street,\r\n        houseNumber: body.houseNumber,\r\n      })\r\n      .then((res) => {\r\n        return this.recieverService.create({\r\n          id: 0,\r\n          addressId: res.id,\r\n          firstName: body.firstName,\r\n          lastName: body.lastName,\r\n          email: body.email,\r\n          phoneNumber: body.phoneNumber,\r\n        });\r\n      });\r\n  }\r\n\r\n  // gets all recieveres\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post('/all')\r\n  getAll() {\r\n    return this.recieverService.getAll();\r\n  }\r\n\r\n  // gets user's all reciever\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get()\r\n  async getMyRecieveres(@Req() req: authRequest) {\r\n    const addressIds: number[] = await this.addressService\r\n      .find({\r\n        where: { userId: req.user.sub },\r\n      })\r\n      .then((addresses) => {\r\n        return addresses.map((a) => a.id);\r\n      });\r\n    return this.recieverService.RecieveresByAddressIds(addressIds);\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { RecieverService } from './reciever.service';\r\nimport { RecieverController } from './reciever.controller';\r\nimport { recieverEntity } from '../../Entities';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { AddressModule } from '../address/address.module';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([recieverEntity]), AddressModule],\r\n  providers: [RecieverService],\r\n  controllers: [RecieverController],\r\n})\r\nexport class RecieverModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { recieverEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\n@Injectable()\r\nexport class RecieverService extends GenericService<recieverEntity> {\r\n  constructor(\r\n    @InjectRepository(recieverEntity)\r\n    private recieverRepository: Repository<recieverEntity>\r\n  ) {\r\n    super(recieverRepository);\r\n  }\r\n\r\n\r\n  async RecieveresByAddressIds(addressIds: number[]) {\r\n    const recievers = await Promise.all(\r\n      addressIds.map((id) => {\r\n        return this.getRecByAdId(id);\r\n      })\r\n    );\r\n    return [].concat(...recievers);\r\n  }\r\n  private async getRecByAdId(id: number): Promise<recieverEntity[]> {\r\n    return this.recieverRepository.find({\r\n      where: { addressId: id },\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Get,\r\n  Patch,\r\n  Post,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsNumber } from 'class-validator';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { TransactionService } from './transaction.service';\r\n\r\nclass buyDto {\r\n  @IsNumber()\r\n  amount: number;\r\n}\r\n\r\n@Controller('transaction')\r\nexport class TransactionController {\r\n  constructor(private readonly transactionService: TransactionService) {}\r\n\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post()\r\n  all() {\r\n    return this.transactionService.getAll();\r\n  }\r\n\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Get()\r\n  getMyTransactions(@Req() req: authRequest) {\r\n    return this.transactionService.find({\r\n      where: { userId: req.user.sub },\r\n    });\r\n  }\r\n\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin') // TODO: hogyan lehessen venni stabuck-ot\r\n  @Patch()\r\n  buy(@Req() req: authRequest, @Body() body: buyDto) {\r\n    const tra = { userId: req.user.sub, amount: body.amount, direction: true };\r\n    return this.transactionService.create(tra);\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { transactionEntity } from '../../Entities';\r\nimport { TransactionController } from './transaction.controller';\r\nimport { TransactionService } from './transaction.service';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([transactionEntity])],\r\n  controllers: [TransactionController],\r\n  providers: [TransactionService],\r\n})\r\nexport class TransactionModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { transactionEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\n@Injectable()\r\nexport class TransactionService extends GenericService<transactionEntity> {\r\n  constructor(\r\n    @InjectRepository(transactionEntity)\r\n    private transactionRepository: Repository<transactionEntity>\r\n  ) {\r\n    super(transactionRepository);\r\n  }\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  Patch,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsString } from 'class-validator';\r\nimport { FindManyOptions } from 'typeorm';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { userUpdateDto } from './userUpdate.DTO';\r\nimport { UserService } from './user.service';\r\nimport { userMinDto } from './userMin.DTO';\r\nimport { userInterface } from '@stabox/stabox-lib';\r\n\r\nclass idDto {\r\n  @IsString()\r\n  id: string;\r\n}\r\n\r\n@Controller('user')\r\nexport class UserController {\r\n  constructor(private readonly userService: UserService) {}\r\n\r\n  //gets own user data\r\n  @UseGuards(AuthGuard)\r\n  @Get()\r\n  getMyData(@Req() req: authRequest) {\r\n    return this.userService.getMyData(req);\r\n  }\r\n\r\n  //gets all username\r\n  @UseGuards(AuthGuard)\r\n  @Get('/all')\r\n  getAll() {\r\n    return this.userService.getAllUsername();\r\n  }\r\n\r\n  //Create user\r\n  @UseGuards(AuthGuard)\r\n  @Put()\r\n  create(\r\n    @Req() req: authRequest,\r\n    @Body() body: userMinDto\r\n  ): Promise<userInterface> {\r\n    //const body: userMin = { id: 0, username: '', email: '', authId: '' };\r\n    return this.userService.new(req.user.sub, body);\r\n  }\r\n\r\n  //Delete user\r\n  @UseGuards(AuthGuard)\r\n  @Delete()\r\n  delete(@Req() req: authRequest) {\r\n    return this.userService.deletee(req.user.sub);\r\n  }\r\n\r\n  //Modify user\r\n  @UseGuards(AuthGuard)\r\n  @Patch()\r\n  modify(@Req() req: authRequest, @Body() body: userUpdateDto) {\r\n    const newUser: {\r\n      username: string;\r\n      id: string;\r\n      firstName: string;\r\n      lastName: string;\r\n      phoneNumber: string;\r\n    } = {\r\n      username: body.username,\r\n      id: req.user.sub,\r\n      firstName: body.firstName,\r\n      lastName: body.lastName,\r\n      phoneNumber: body.phoneNumber,\r\n    };\r\n    this.userService.addUserRole(newUser.id);\r\n    return this.userService.updatee(newUser.id, newUser);\r\n  }\r\n\r\n  //get all user's all information\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post()\r\n  find(@Body() body: FindManyOptions) {\r\n    return this.userService.find(body);\r\n  }\r\n\r\n  //Add role to user\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post('/user')\r\n  addUserRole(@Body() body: idDto) {\r\n    return this.userService.addUserRole(body.id);\r\n  }\r\n\r\n  //Add role to user\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('user')\r\n  @Post('/shipper')\r\n  addShipperRole(@Body() body: idDto) {\r\n    return this.userService.addShipperRole(body.id);\r\n  }\r\n\r\n  // //Remove role from user\r\n  // @Post()\r\n  // removeRole() {\r\n  //   return this.userService.removeRole();\r\n  // }\r\n}\r\n","import { HttpModule } from '@nestjs/axios';\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { userEntity } from '../../Entities';\r\nimport { UserController } from './user.controller';\r\nimport { UserService } from './user.service';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([userEntity]), HttpModule],\r\n  controllers: [UserController],\r\n  providers: [UserService],\r\n  exports: [UserService],\r\n})\r\nexport class UserModule {}\r\n","import { HttpService } from '@nestjs/axios';\r\nimport {\r\n  ConflictException,\r\n  Injectable,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { userInterface } from '@stabox/stabox-lib';\r\nimport { Repository } from 'typeorm';\r\nimport { userEntity } from '../../Entities';\r\nimport { authRequest } from '../auth';\r\nimport { GenericService } from '../generics/generic.service';\r\nimport { userMinDto } from './userMin.DTO';\r\n\r\n@Injectable()\r\nexport class UserService extends GenericService<userInterface> {\r\n  constructor(\r\n    @InjectRepository(userEntity)\r\n    private userRepository: Repository<userInterface>,\r\n    private httpService: HttpService\r\n  ) {\r\n    super(userRepository);\r\n  }\r\n\r\n  async addUserRole(id: string) {\r\n    return this.userRepository.findOne({ id: id }).then((res) => {\r\n      if (res == undefined) {\r\n        throw new NotFoundException('This user does not exist!');\r\n      } else {\r\n        const options = {\r\n          headers: {\r\n            'content-type': 'application/json',\r\n            authorization: 'Bearer ' + process.env.AUTH0_API_TOKEN,\r\n            'cache-control': 'no-cache',\r\n          },\r\n          data: { roles: ['rol_fOmBHGPGmePItkqG'] },\r\n        };\r\n        const data = { roles: ['rol_fOmBHGPGmePItkqG'] };\r\n        return this.httpService\r\n          .post(\r\n            process.env.AUTH0_DOMAIN + 'api/v2/users/' + id + '/roles',\r\n            data,\r\n            options\r\n          )\r\n          .subscribe((res) => res);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addShipperRole(id: string) {\r\n    return this.userRepository.findOne({ id: id }).then((res) => {\r\n      if (res == undefined) {\r\n        throw new NotFoundException('This user does not exist!');\r\n      } else {\r\n        const options = {\r\n          headers: {\r\n            'content-type': 'application/json',\r\n            authorization: 'Bearer ' + process.env.AUTH0_API_TOKEN,\r\n            'cache-control': 'no-cache',\r\n          },\r\n          data: { roles: ['rol_72IOyNuWHPWpC03o'] },\r\n        };\r\n        const data = { roles: ['rol_72IOyNuWHPWpC03o'] };\r\n        return this.httpService\r\n          .post(\r\n            process.env.AUTH0_DOMAIN + 'api/v2/users/' + id + '/roles',\r\n            data,\r\n            options\r\n          )\r\n          .subscribe((res) => res);\r\n      }\r\n    });\r\n  }\r\n\r\n  async deletee(id: string) {\r\n    return await this.userRepository.delete(id);\r\n  }\r\n\r\n  async updatee(id: string, data: object) {\r\n    return await this.userRepository.update(id, data);\r\n  }\r\n\r\n  async new(authId: string, user: userMinDto): Promise<userInterface> {\r\n    const newUser: {\r\n      email: string;\r\n      username: string;\r\n      id: string;\r\n    } = {\r\n      email: user.email,\r\n      username: user.username,\r\n      id: authId,\r\n    };\r\n    return this.userRepository.findOne({ email: user.email }).then((res) => {\r\n      if (res == undefined) {\r\n        return this.userRepository.findOne({ id: authId }).then((res) => {\r\n          if (res == undefined) {\r\n            return this.userRepository.save(newUser);\r\n          } else {\r\n            throw new ConflictException('User already exists with this id!');\r\n          }\r\n        });\r\n      } else {\r\n        throw new ConflictException(\r\n          'User already exists with this email address!'\r\n        );\r\n      }\r\n    });\r\n  }\r\n  async getAllUsername() {\r\n    return this.userRepository.find().then((res) => {\r\n      return res.map((user) => user.username);\r\n    });\r\n  }\r\n  async getMyData(req: authRequest) {\r\n    return this.userRepository.findOne({ id: req.user.sub }).then((res) => {\r\n      if (res == undefined) {\r\n        throw new NotFoundException(\r\n          'You can only get your data if you already have a user!'\r\n        );\r\n      } else {\r\n        const roles: { 'https://www.stabox.hu/roles': string[] } = {\r\n          'https://www.stabox.hu/roles': [\r\n            ...req.user['https://www.stabox.hu/roles'],\r\n          ],\r\n        };\r\n        return { ...roles, ...res }; // TODO: test this\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { IsString, IsEmail } from 'class-validator';\r\n\r\nexport class userMinDto {\r\n  @IsEmail()\r\n  email: string;\r\n  @IsString()\r\n  username: string;\r\n}\r\n","import { IsString, IsPhoneNumber, IsNotEmpty } from 'class-validator';\r\n\r\nexport class userUpdateDto {\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  username: string;\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  firstName: string;\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  lastName: string;\r\n  @IsNotEmpty()\r\n  @IsPhoneNumber()\r\n  phoneNumber: string;\r\n}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Delete,\r\n  Get,\r\n  MethodNotAllowedException,\r\n  Patch,\r\n  Post,\r\n  Put,\r\n  Req,\r\n  UseGuards,\r\n} from '@nestjs/common';\r\nimport { IsNumber, IsString } from 'class-validator';\r\nimport { vehicleEntity } from '../../Entities';\r\nimport { AuthGuard, authRequest, RoleGuard } from '../auth';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { VehicleService } from './vehicle.service';\r\n\r\nclass idDto {\r\n  @IsNumber()\r\n  id: number;\r\n}\r\n\r\nclass vehicleDto {\r\n  @IsString()\r\n  name: string;\r\n}\r\n\r\nclass myVehicleDto {\r\n  @IsNumber()\r\n  id: number;\r\n  @IsString()\r\n  name: string;\r\n}\r\n\r\n@Controller('vehicle')\r\nexport class VehicleController {\r\n  constructor(private readonly vehicleService: VehicleService) {}\r\n\r\n  //creates vehicle\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Put()\r\n  create(@Req() req: authRequest, @Body() body: vehicleDto) {\r\n    return this.vehicleService.create({\r\n      id: 0,\r\n      userId: req.user.sub,\r\n      name: body.name,\r\n    });\r\n  }\r\n\r\n  // gets all vehicles\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('admin')\r\n  @Post('/all')\r\n  getAll() {\r\n    return this.vehicleService.getAll();\r\n  }\r\n\r\n  // gets user's all vehicles\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Get()\r\n  getMyVehicles(@Req() req: authRequest): Promise<vehicleEntity[]> {\r\n    return this.vehicleService.find({\r\n      where: { userId: req.user.sub },\r\n    });\r\n  }\r\n\r\n  // delete own vehicles\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Delete()\r\n  delete(@Req() req: authRequest, @Body() body: idDto) {\r\n    return this.vehicleService.getById(body.id).then((a) => {\r\n      if (a.userId == req.user.sub) {\r\n        return this.vehicleService.delete(body.id);\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only delete your own vehicles'\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  //modify own vehicles\r\n  @UseGuards(AuthGuard, RoleGuard)\r\n  @Roles('shipper')\r\n  @Patch()\r\n  update(@Req() req: authRequest, @Body() body: myVehicleDto) {\r\n    return this.vehicleService.getById(body.id).then((a) => {\r\n      if (a.userId == req.user.sub) {\r\n        const newVehicle: vehicleDto = {\r\n          name: body.name,\r\n        };\r\n        return this.vehicleService.update(body.id, newVehicle);\r\n      } else {\r\n        throw new MethodNotAllowedException(\r\n          'You can only modify your own vehicles'\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { VehicleService } from './vehicle.service';\r\nimport { VehicleController } from './vehicle.controller';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { vehicleEntity } from '../../Entities';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([vehicleEntity])],\r\n  providers: [VehicleService],\r\n  controllers: [VehicleController],\r\n  exports: [VehicleService],\r\n})\r\nexport class VehicleModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { vehicleEntity } from '../../Entities';\r\nimport { GenericService } from '../generics/generic.service';\r\n\r\n@Injectable()\r\nexport class VehicleService extends GenericService<vehicleEntity> {\r\n  constructor(\r\n    @InjectRepository(vehicleEntity)\r\n    private vehicleRepository: Repository<vehicleEntity>\r\n  ) {\r\n    super(vehicleRepository);\r\n  }\r\n}\r\n","module.exports = require(\"@nestjs/axios\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"class-validator\");","module.exports = require(\"express-jwt\");","module.exports = require(\"jwks-rsa\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\n\r\nimport { Logger, ValidationPipe } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\n\r\nimport { AppModule } from './app/app.module';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  const globalPrefix = 'api';\r\n  app.enableCors();\r\n  app.useGlobalPipes(new ValidationPipe());\r\n  app.setGlobalPrefix(globalPrefix);\r\n  const port = process.env.PORT || 3333;\r\n  await app.listen(port);\r\n  Logger.log(\r\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\r\n  );\r\n}\r\n\r\nbootstrap();\r\n"],"names":[],"sourceRoot":""}